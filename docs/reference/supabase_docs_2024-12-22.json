[{
  "url": "https://supabase.com/docs",
  "markdown": "# Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/reactjs",
  "markdown": "# Use Supabase with React | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started",
  "markdown": "# Getting Started | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/nextjs",
  "markdown": "# Use Supabase with Next.js | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/redwoodjs",
  "markdown": "# Use Supabase with RedwoodJS | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/flutter",
  "markdown": "# Use Supabase with Flutter | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/kotlin",
  "markdown": "# Use Supabase with Android Kotlin\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/sveltekit",
  "markdown": "# Use Supabase with SvelteKit | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/solidjs",
  "markdown": "# Use Supabase with SolidJS | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/vue",
  "markdown": "# Use Supabase with Vue | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/nuxtjs",
  "markdown": "# Use Supabase with NuxtJS | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/refine",
  "markdown": "# Use Supabase with refine | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts",
  "markdown": "# AI Prompts | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/overview",
  "markdown": "# Database | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/auth",
  "markdown": "# Auth | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/storage",
  "markdown": "# Storage | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/realtime",
  "markdown": "# Realtime | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/functions",
  "markdown": "# Edge Functions | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/ai",
  "markdown": "# AI & Vectors | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/cron",
  "markdown": "# Cron | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/queues",
  "markdown": "# Supabase Queues | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/dart/introduction",
  "markdown": "Flutter API Reference | Supabase Docs\n\nDart Reference v2.0\n\n# Flutter Client Library\n\nsupabase\\_flutter[View on GitHub](https://github.com/supabase/supabase-flutter)\n\nThis reference documents every object and method available in Supabase's Flutter library, [supabase-flutter](https://pub.dev/packages/supabase_flutter). You can use supabase-flutter to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\nWe also provide a [supabase](https://pub.dev/packages/supabase) package for non-Flutter projects.\n\n* * *\n\n## Installing\n\n### Install from pub.dev[#](#install-from-pubdev)\n\nYou can install Supabase package from [pub.dev](https://pub.dev/packages/supabase_flutter)\n\nFlutterOther Dart Project\n\nTerminal\n\n`   1  flutter pub add supabase_flutter            `\n\n* * *\n\n## Initializing\n\nYou can initialize Supabase with the static `initialize()` method of the `Supabase` class.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n*   urlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   anonKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   headersOptionalMap<String, String>\n    \n    Custom header to be passed to the Supabase client.\n    \n*   httpClientOptionalClient\n    \n    Custom http client to be used by the Supabase client.\n    \n*   authOptionsOptionalFlutterAuthClientOptions\n    \n    Options to change the Auth behaviors.\n    \n    Details\n    \n    *   authFlowTypeOptionalAuthFlowType\n        \n        Whether to use the `pkce` flow or the `implicit` flow. Defaults to `pkce`.\n        \n    *   localStorageOptionalLocalStorage\n        \n        Parameter to override the local storage to store auth tokens.\n        \n    *   autoRefreshTokenOptionalbool\n        \n        Whether to automatically refresh the token when it expires. Defaults to `true`.\n        \n    \n*   postgrestOptionsOptionalPostgrestClientOptions\n    \n    Options to change the Postgrest behaviors.\n    \n    Details\n    \n    *   schemaOptionalString\n        \n        Schema to query with the Supabase client. Defaults to `public`.\n        \n    \n*   realtimeClientOptionsOptionalRealtimeClientOptions\n    \n    Options to change the Realtime behaviors.\n    \n    Details\n    \n    *   logLevelOptionalRealtimeLogLevel\n        \n        Level of realtime server logs to to be logged.\n        \n    \n*   storageOptionsOptionalStorageClientOptions\n    \n    Options to change the Storage behaviors.\n    \n    Details\n    \n    *   retryAttemptsOptionalint\n        \n        The number of times to retry a failed upload request. Defaults to `0`.\n        \n    \n\nFor FlutterFor other Dart projects\n\n`   1  Future<void> main() async {    2  await Supabase.initialize(    3  url: 'https://xyzcompany.supabase.co',    4  anonKey: 'public-anon-key',    5  );    6      7  runApp(MyApp());    8  }    9      10  // Get a reference your Supabase client    11  final supabase = Supabase.instance.client;            `\n\n* * *\n\n## Upgrade guide\n\nAlthough `supabase_flutter` v2 brings a few breaking changes, for the most part the public API should be the same with a few minor exceptions. We have brought numerous updates behind the scenes to make the SDK work more intuitively for Flutter and Dart developers.\n\n## Upgrade the client library[#](#upgrade-the-client-library)\n\nMake sure you are using v2 of the client library in your `pubspec.yaml` file.\n\n`   1  supabase_flutter: ^2.0.0            `\n\n_Optionally_ passing custom configuration to `Supabase.initialize()` is now organized into separate objects:\n\nBeforeAfter\n\nmain.dart\n\n`   1  await Supabase.initialize(    2  url: supabaseUrl,    3  anonKey: supabaseKey,    4  authFlowType: AuthFlowType.pkce,    5  storageRetryAttempts: 10,    6  realtimeClientOptions: const RealtimeClientOptions(    7  logLevel: RealtimeLogLevel.info,    8  ),    9  );            `\n\n### Auth updates[#](#auth-updates)\n\n#### Renaming Provider to OAuthProvider[#](#renaming-provider-to-oauthprovider)\n\n`Provider` enum is renamed to `OAuthProvider`. Previously the `Provider` symbol often collided with classes in the [provider](https://pub.dev/packages/provider) package and developers needed to add import prefixes to avoid collisions. With the new update, developers can use Supabase and Provider in the same codebase without any import prefixes.\n\nBeforeAfter\n\n`   1  await supabase.auth.signInWithOAuth(    2  Provider.google,    3  );            `\n\n#### Sign in with Apple method deprecated[#](#sign-in-with-apple-method-deprecated)\n\nWe have removed the [sign\\_in\\_with\\_apple](https://pub.dev/packages/sign_in_with_apple) dependency in v2. This is because not every developer needs to sign in with Apple, and we want to reduce the number of dependencies in the library.\n\nWith v2, you can import [sign\\_in\\_with\\_apple](https://pub.dev/packages/sign_in_with_apple) as a separate dependency if you need to sign in with Apple. We have also added `auth.generateRawNonce()` method to easily generate a secure nonce.\n\nBeforeAfter\n\n`   1  await supabase.auth.signInWithApple();            `\n\n#### Initialization does not await for session refresh[#](#initialization-does-not-await-for-session-refresh)\n\nIn v1, `Supabase.initialize()` would await for the session to be refreshed before returning. This caused delays in the app's launch time, especially when the app is opened in a poor network environment.\n\nIn v2, `Supabase.initialize()` returns immediately after obtaining the session from the local storage, which makes the app launch faster. Because of this, there is no guarantee that the session is valid when the app starts.\n\nIf you need to make sure the session is valid, you can access the `isExpired` getter to check if the session is valid. If the session is expired, you can listen to the `onAuthStateChange` event and wait for a new `tokenRefreshed` event to be fired.\n\nBeforeAfter\n\n`   1  // Session is valid, no check required    2  final session = supabase.auth.currentSession;            `\n\n#### Removing Flutter Webview dependency for OAuth sign in[#](#removing-flutter-webview-dependency-for-oauth-sign-in)\n\nIn v1, on iOS you could pass a `BuildContext` to the `signInWithOAuth()` method to launch the OAuth flow in a Flutter Webview.\n\nIn v2, we have dropped the [webview\\_flutter](https://pub.dev/packages/webview_flutter) dependency in v2 to allow you to have full control over the UI of the OAuth flow. We now have [native support for Google and Apple sign in](/docs/reference/dart/auth-signinwithidtoken), so opening an external browser is no longer needed on iOS.\n\nBecause of this update, we no longer need the `context` parameter, so we have removed the `context` parameter from the `signInWithOAuth()` method.\n\nBeforeAfter\n\n`   1  // Opens a webview on iOS.    2  await supabase.auth.signInWithOAuth(    3  Provider.github,    4  authScreenLaunchMode: LaunchMode.inAppWebView,    5  context: context,    6  );            `\n\n#### PKCE is the default auth flow type[#](#pkce-is-the-default-auth-flow-type)\n\n[PKCE flow](https://supabase.com/blog/supabase-auth-sso-pkce#introducing-pkce), which is a more secure method for obtaining sessions from deep links, is now the default auth flow for any authentication involving deep links.\n\nBeforeAfter\n\n`   1  await Supabase.initialize(    2  url: 'SUPABASE_URL',    3  anonKey: 'SUPABASE_ANON_KEY',    4  authFlowType: AuthFlowType.implicit, // set to implicit by default    5  );            `\n\n#### Auth callback host name parameter removed[#](#auth-callback-host-name-parameter-removed)\n\n`Supabase.initialize()` no longer has the `authCallbackUrlHostname` parameter. The `supabase_flutter` SDK will automatically detect auth callback URLs and handle them internally.\n\nBeforeAfter\n\n`   1  await Supabase.initialize(    2  url: 'SUPABASE_URL',    3  anonKey: 'SUPABASE_ANON_KEY',    4  authCallbackUrlHostname: 'auth-callback',    5  );            `\n\n#### SupabaseAuth class removed[#](#supabaseauth-class-removed)\n\nThe `SupabaseAuth` had an `initialSession` member, which was used to obtain the initial session upon app start. This is now removed, and `currentSession` should be used to access the session at any time.\n\nBeforeAfter\n\n``   1  // Use `initialSession` to obtain the initial session when the app starts.    2  final initialSession = await SupabaseAuth.initialSession;            ``\n\n### Data methods[#](#data-methods)\n\n#### Insert and return data[#](#insert-and-return-data)\n\nWe made the query builder immutable, which means you can reuse the same query object to chain multiple filters and get the expected outcome.\n\nBeforeAfter\n\n``   1  // If you declare a query and chain filters on it    2  final myQuery = supabase.from('my_table').select();    3      4  final foo = await myQuery.eq('some_col', 'foo');    5      6  // The `eq` filter above is applied in addition to the following filter    7  final bar = await myQuery.eq('another_col', 'bar');            ``\n\n#### Renaming is and in filter[#](#renaming-is-and-in-filter)\n\nBecause `is` and `in` are [reserved keywords](https://dart.dev/languages/keywords) in Dart, v1 used `is_` and `in_` as query filter names. Users found the underscore confusing, so the query filters are now renamed to `isFilter` and `inFilter`.\n\nBeforeAfter\n\n`   1  final data = await supabase    2  .from('users')    3  .select()    4  .is_('status', null);    5      6  final data = await supabase    7  .from('users')    8  .select()    9  .in_('status', ['ONLINE', 'OFFLINE']);            `\n\n#### Deprecate FetchOption in favor of `count()` and `head()` methods[#](#deprecate-fetchoption-in-favor-of-count-and-head-methods)\n\n`FetchOption()` on `.select()` is now deprecated, and new `.count()` and `head()` methods are added to the query builder.\n\n`count()` on `.select()` performs the select while also getting the count value, and `.count()` directly on `.from()` performs a head request resulting in only fetching the count value.\n\nBeforeAfter\n\n`   1  // Request with count option    2  final res = await supabase.from('cities').select(    3  'name',    4  const FetchOptions(    5  count: CountOption.exact,    6  ),    7  );    8      9  final data = res.data;    10  final count = res.count;    11      12  // Request with count and head option    13  // obtains the count value without fetching the data.    14  final res = await supabase.from('cities').select(    15  'name',    16  const FetchOptions(    17  count: CountOption.exact,    18  head: true,    19  ),    20  );    21      22  final count = res.count;            `\n\n#### PostgREST error codes[#](#postgrest-error-codes)\n\nThe `PostgrestException` instance thrown by the API methods has a `code` property. In v1, the `code` property contained the http status code.\n\nIn v2, the `code` property contains the [PostgREST error code](https://postgrest.org/en/stable/references/errors.html), which is more useful for debugging.\n\nBeforeAfter\n\n`   1  try {    2  await supabase.from('countries').select();    3  } on PostgrestException catch (error) {    4  error.code; // Contains http status code    5  }            `\n\n### Realtime methods[#](#realtime-methods)\n\nRealtime methods contains the biggest breaking changes. Most of these changes are to make the interface more type safe.\n\nWe have removed the `.on()` method and replaced it with `.onPostgresChanges()`, `.onBroadcast()`, and three different presence methods.\n\n#### Postgres Changes[#](#postgres-changes)\n\nUse the new `.onPostgresChanges()` method to listen to realtime changes in the database.\n\nIn v1, filters were not strongly typed because they took a `String` type. In v2, `filter` takes an object. Its properties are strictly typed to catch type errors.\n\nThe payload of the callback is now typed as well. In `v1`, the payload was returned as `dynamic`. It is now returned as a `PostgresChangePayload` object. The object contains the `oldRecord` and `newRecord` properties for accessing the data before and after the change.\n\nBeforeAfter\n\n`   1  supabase.channel('my_channel').on(    2  RealtimeListenTypes.postgresChanges,    3  ChannelFilter(    4  event: '*',    5  schema: 'public',    6  table: 'messages',    7  filter: 'room_id=eq.200',    8  ),    9  (dynamic payload, [ref]) {    10  final Map<String, dynamic> newRecord = payload['new'];    11  final Map<String, dynamic> oldRecord = payload['old'];    12  },    13  ).subscribe();            `\n\n#### Broadcast[#](#broadcast)\n\nBroadcast now uses the dedicated `.onBroadcast()` method, rather than the generic `.on()` method. Because the method is specific to broadcast, it takes fewer properties.\n\nBeforeAfter\n\n`   1  supabase.channel('my_channel').on(    2  RealtimeListenTypes.broadcast,    3  ChannelFilter(    4  event: 'position',    5  ),    6  (dynamic payload, [ref]) {    7  print(payload);    8  },    9  ).subscribe();            `\n\n#### Presence[#](#presence)\n\nRealtime Presence gets three different methods for listening to three different presence events: `sync`, `join`, and `leave`. This allows the callback to be strictly typed.\n\nBeforeAfter\n\n`   1  final channel = supabase.channel('room1');    2      3  channel.on(    4  RealtimeListenTypes.presence,    5  ChannelFilter(event: 'sync'),    6  (payload, [ref]) {    7  print('Synced presence state: ${channel.presenceState()}');    8  },    9  ).on(    10  RealtimeListenTypes.presence,    11  ChannelFilter(event: 'join'),    12  (payload, [ref]) {    13  print('Newly joined presences $payload');    14  },    15  ).on(    16  RealtimeListenTypes.presence,    17  ChannelFilter(event: 'leave'),    18  (payload, [ref]) {    19  print('Newly left presences: $payload');    20  },    21  ).subscribe(    22  (status, [error]) async {    23  if (status == 'SUBSCRIBED') {    24  await channel.track({'online_at': DateTime.now().toIso8601String()});    25  }    26  },    27  );            `\n\n* * *\n\n## Fetch data\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/dart/using-filters)\n*   `select()` can be combined with [Modifiers](/docs/reference/dart/using-modifiers)\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n*   columnsOptionalString\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`   1  final data = await supabase    2  .from('countries')    3  .select();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'Afghanistan'    5  },    6  {    7  'id': 2,    8  'name': 'Albania'    9  },    10  {    11  'id': 3,    12  'name': 'Algeria'    13  },    14  ]            `\n\n* * *\n\n## Insert data\n\nPerform an INSERT into the table or view.\n\n### Parameters\n\n*   valuesRequiredMap<String, dynamic> or List<Map<String, dynamic>>\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n\nCreate a recordFetch inserted recordBulk create\n\n`   1  await supabase    2  .from('cities')    3  .insert({'name': 'The Shire', 'country_id': 554});            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);            `\n\n* * *\n\n## Update data\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n*   valuesRequiredMap<String, dynamic>\n    \n    The values to update with.\n    \n\nUpdate your dataUpdate a record and return itUpdate JSON data\n\n`   1  await supabase    2  .from('countries')    3  .update({ 'name': 'Australia' })    4  .eq('id', 1);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Taiwan');            `\n\n* * *\n\n## Upsert data\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.\n\n### Parameters\n\n*   valuesRequiredMap<String, dynamic> or List<Map<String, dynamic>>\n    \n    The values to upsert with. Pass a Map to upsert a single row or an List to upsert multiple rows.\n    \n*   onConflictOptionalString\n    \n    Comma-separated UNIQUE column(s) to specify how duplicate rows are determined. Two rows are duplicates if all the `onConflict` columns are equal.\n    \n*   ignoreDuplicatesOptionalbool\n    \n    If `true`, duplicate rows are ignored. If `false`, duplicate rows are merged with existing rows.\n    \n*   defaultToNullOptionalbool\n    \n    Make missing fields default to `null`. Otherwise, use the default value for the column. This only applies when inserting new rows, not when merging with existing rows where ignoreDuplicates is set to false. This also only applies when doing bulk upserts.\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`   1  final data = await supabase    2  .from('countries')    3  .upsert({ 'id': 1, 'name': 'Albania' })    4  .select();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'Albania'    5  }    6  ]            `\n\n* * *\n\n## Delete data\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have RLS enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n\nDelete recordsDelete multiple recordsFetch deleted records\n\n`   1  await supabase    2  .from('countries')    3  .delete()    4  .eq('id', 1);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Spain');            `\n\n* * *\n\n## Call a Postgres function\n\nPerform a function call.\n\nYou can call Postgres functions as Remote Procedure Calls, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.\n\n### Parameters\n\n*   fnRequiredString\n    \n    The function name to call.\n    \n*   paramsOptionalMap<String, dynamic>\n    \n    The arguments to pass to the function call.\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filters\n\n`   1  final data = await supabase    2  .rpc('hello_world');            `\n\nData source\n\n`   1  create function hello_world() returns text as $$    2  select 'Hello world';    3  $$ language sql;            `\n\nResponse\n\n`   1  'Hello world'            `\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Database function returns a table response, you can also apply filters.\n\nApplying FiltersChaining FiltersConditional ChainingFilter by values within a JSON columnFilter Referenced Tables\n\n`   1  final data = await supabase    2  .from('cities')    3  .select('name, country_id')    4  .eq('name', 'The Shire'); // Correct    5      6  final data = await supabase    7  .from('cities')    8  .eq('name', 'The Shire') // Incorrect    9  .select('name, country_id');            `\n\nNotes\n\nFilters must be applied after any of `select()`, `update()`, `upsert()`, `delete()`, and `rpc()` and before [modifiers](/docs/reference/dart/using-modifiers).\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .eq('name', 'Albania');            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'name': 'Albania'    5  },    6  ]            `\n\n* * *\n\n## Column is not equal to a value\n\nFinds all rows whose value on the stated `column` doesn't match the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select('name, country_id')    4  .neq('name', 'Albania');            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'Afghanistan'    5  },    6  {    7  'id': 3,    8  'name': 'Algeria'    9  },    10  ]            `\n\n* * *\n\n## Column is greater than a value\n\nFinds all rows whose value on the stated `column` is greater than the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .gt('id', 2);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 3,    4  'name': 'Algeria'    5  },    6  ]            `\n\n* * *\n\n## Column is greater than or equal to a value\n\nFinds all rows whose value on the stated `column` is greater than or equal to the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .gte('id', 2);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'name': 'Albania'    5  },    6  {    7  'id': 3,    8  'name': 'Algeria'    9  },    10  ]            `\n\n* * *\n\n## Column is less than a value\n\nFinds all rows whose value on the stated `column` is less than the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .lt('id', 2);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'Afghanistan'    5  },    6  ]            `\n\n* * *\n\n## Column is less than or equal to a value\n\nFinds all rows whose value on the stated `column` is less than or equal to the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject\n    \n    The value to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .lte('id', 2);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'Afghanistan'    5  },    6  {    7  'id': 2,    8  'name': 'Albania'    9  },    10  ]            `\n\n* * *\n\n## Column matches a pattern\n\nFinds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   patternRequiredString\n    \n    The pattern to match with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .like('name', '%Alba%');            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'name': 'Albania'    5  },    6  ]            `\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nFinds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   patternRequiredString\n    \n    The pattern to match with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .ilike('name', '%alba%');            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'name': 'Albania'    5  },    6  ]            `\n\n* * *\n\n## Column is a value\n\nA check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valueRequiredObject?\n    \n    The value to filter with.\n    \n\nChecking for nullness, true or false\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .isFilter('name', null);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'null'),    8  (2, null);            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'null'    5  },    6  ]            `\n\nNotes\n\nUsing the `eq()` filter doesn't work when filtering for `null`.\n\nInstead, you need to use `isFilter()`.\n\n`isFilter()` is equivalent to `is()` in SDKs for other languages. It's named `isFilter()` in Dart to avoid a conflict with the `is` keyword in Dart.\n\n* * *\n\n## Column is in an array\n\nFinds all rows whose value on the stated `column` is found on the specified `values`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   valuesRequiredList\n    \n    The List to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .inFilter('name', ['Albania', 'Algeria']);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'name': 'Albania'    5  },    6  {    7  'id': 3,    8  'name': 'Algeria'    9  },    10  ]            `\n\nNotes\n\n`inFilter()` is equivalent to `in()` in SDKs for other languages. It's named `inFilter()` in Dart to avoid a conflict with the `in` keyword in Dart.\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The jsonb, array, or range column to filter on.\n    \n*   valueRequiredObject\n    \n    The jsonb, array, or range value to filter with.\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   1  final data = await supabase    2  .from('issues')    3  .select()    4  .contains('tags', ['is:open', 'priority:low']);            `\n\nData source\n\n`   1  create table    2  issues (    3  id int8 primary key,    4  title text,    5  tags text[]    6  );    7      8  insert into    9  issues (id, title, tags)    10  values    11  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),    12  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'title': 'Cache invalidation is not working',    5  'tags': ['is:open', 'severity:high', 'priority:low']    6  },    7  ]            `\n\nNotes\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The jsonb, array, or range column to filter on.\n    \n*   valueRequiredObject\n    \n    The jsonb, array, or range value to filter with.\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   1  final data = await supabase    2  .from('classes')    3  .select('name')    4  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday']);            `\n\nData source\n\n`   1  create table    2  classes (    3  id int8 primary key,    4  name text,    5  days text[]    6  );    7      8  insert into    9  classes (id, name, days)    10  values    11  (1, 'Chemistry', array['monday', 'friday']),    12  (2, 'History', array['monday', 'wednesday', 'thursday']);            `\n\nResponse\n\n`   1  [    2  {    3  'name': 'Chemistry'    4  },    5  ]            `\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The range column to filter on.\n    \n*   rangeRequiredString\n    \n    The range to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('reservations')    3  .select()    4  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)');            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'room_name': 'Topaz',    5  'during': '[\"2000-01-02 09:00:00\",\"2000-01-02 10:00:00\")'    6  }    7  ]            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The range column to filter on.\n    \n*   rangeRequiredString\n    \n    The range to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('reservations')    3  .select()    4  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)');            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 2,    4  'room_name': 'Topaz',    5  'during': '[\"2000-01-02 09:00:00\",\"2000-01-02 10:00:00\")''    6  },    7  ]            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The range column to filter on.\n    \n*   rangeRequiredString\n    \n    The range to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('reservations')    3  .select()    4  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)');            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'room_name': 'Emerald',    5  'during': '[\"2000-01-01 13:00:00\",\"2000-01-01 15:00:00\")'    6  },    7  ]            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The range column to filter on.\n    \n*   rangeRequiredString\n    \n    The range to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('reservations')    3  .select()    4  .rangeLte('during', '[2000-01-01 15:00, 2000-01-01 16:00)');            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'room_name': 'Emerald',    5  'during': '[\"2000-01-01 13:00:00\",\"2000-01-01 15:00:00\")'    6  },    7  ]            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The range column to filter on.\n    \n*   rangeRequiredString\n    \n    The range to filter with.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('reservations')    3  .select()    4  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)');            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'room_name': 'Emerald',    5  'during': '[\"2000-01-01 13:00:00\",\"2000-01-01 15:00:00\")'    6  },    7  ]            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The array or range column to filter on.\n    \n*   valueRequiredObject\n    \n    The array or range value to filter with.\n    \n\nOn array columnsOn range columns\n\n`   1  final data = await supabase    2  .from('issues')    3  .select('title')    4  .overlaps('tags', ['is:closed', 'severity:high']);            `\n\nData source\n\n`   1  create table    2  issues (    3  id int8 primary key,    4  title text,    5  tags text[]    6  );    7      8  insert into    9  issues (id, title, tags)    10  values    11  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),    12  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);            `\n\nResponse\n\n`   1  [    2  {    3  'title': 'Cache invalidation is not working'    4  },    5  ]            `\n\n* * *\n\n## Match a string\n\nFinds all rows whose tsvector value on the stated `column` matches to\\_tsquery(query).\n\n### Parameters\n\n*   columnRequiredString\n    \n    The text or tsvector column to filter on.\n    \n*   queryRequiredString\n    \n    The query text to match with.\n    \n*   configOptionalString\n    \n    The text search configuration to use.\n    \n*   typeOptionalTextSearchType\n    \n    Change how the `query` text is interpreted.\n    \n\nText searchBasic normalizationFull normalizationWebsearch\n\n`   1  final data = await supabase    2  .from('quotes')    3  .select('catchphrase')    4  .textSearch('content', \"'eggs' & 'ham'\",    5  config: 'english'    6  );            `\n\nData source\n\n`   1  create table texts (    2  id bigint    3  primary key    4  generated always as identity,    5  content text    6  );    7      8  insert into texts (content) values    9  ('Four score and seven years ago'),    10  ('The road goes ever on and on'),    11  ('Green eggs and ham')    12  ;            `\n\nResponse\n\n`   1  [    2  {    3  'content': 'Green eggs and ham'    4  }    5  ]            `\n\n* * *\n\n## Match an associated value\n\nFinds all rows whose columns match the specified `query` object.\n\n### Parameters\n\n*   queryRequiredMap<String, dynamic>\n    \n    The object to filter with, with column names as keys mapped to their filter values\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .match({ 'id': 2, 'name': 'Albania' });            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'name': 'Albania'    4  }    5  ]            `\n\n* * *\n\n## Don't match the filter\n\nFinds all rows which doesn't satisfy the filter.\n\n*   `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n    \n    ``   1  .not('name','eq','Paris')    2  .not('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} for array column and 'cs' for contains.    3  .not('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.    4  .not('id','in','(6,7)') // Use Postgres list () and 'in' instead of `inFilter`.    5  .not('id','in','(${mylist.join(',')})') // You can insert a Dart list array.            ``\n    \n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   operatorRequiredString\n    \n    The operator to be negated to filter with, following PostgREST syntax.\n    \n*   valueOptionalObject\n    \n    The value to filter with, following PostgREST syntax.\n    \n\nWith \\`select()\\`With \\`update()\\`With \\`delete()\\`With \\`rpc()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .not('name', 'is', null)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'null'),    8  (2, null);            `\n\nResponse\n\n`   1  [    2  {    3  'id': 1,    4  'name': 'null'    5  }    6  ]            `\n\n* * *\n\n## Match at least one filter\n\nFinds all rows satisfying at least one of the filters.\n\n*   `.or()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n    \n    ``   1  .or('id.in.(6,7),arraycol.cs.{\"a\",\"b\"}') // Use Postgres list () and 'in' instead of `inFilter`. Array {} and 'cs' for contains.    2  .or('id.in.(${mylist.join(',')}),arraycol.cs.{${mylistArray.join(',')}}') // You can insert a Dart list for list or array column.    3  .or('id.in.(${mylist.join(',')}),rangecol.cs.(${mylistRange.join(',')}]') // You can insert a Dart list for list or range column.            ``\n    \n\n### Parameters\n\n*   filtersRequiredString\n    \n    The filters to use, following PostgREST syntax\n    \n*   referencedTableOptionalString\n    \n    Set this to filter on referenced tables instead of the parent table\n    \n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`   1  final data = await supabase    2  .from('countries')    3  .select('name')    4  .or('id.eq.2,name.eq.Algeria');            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'name': 'Albania'    4  },    5  {    6  'name': 'Algeria'    7  }    8  ]            `\n\n* * *\n\n## Match the filter\n\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\n\n`.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values, so it should only be used as an escape hatch in case other filters don't work.\n\n`   1  .filter('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} and 'cs' for contains.    2  .filter('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.    3  .filter('id','in','(6,7)') // Use Postgres list () and 'in' for in_ filter.    4  .filter('id','cs','{${mylist.join(',')}}') // You can insert a Dart array list.            `\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to filter on.\n    \n*   operatorRequiredString\n    \n    The operator to filter with, following PostgREST syntax.\n    \n*   valueRequiredObject\n    \n    The value to filter with, following PostgREST syntax.\n    \n\nWith \\`select()\\`With \\`update()\\`With \\`delete()\\`With \\`rpc()\\`On a referenced table\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .filter('name', 'in', '(\"Algeria\",\"Japan\")')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 3,    4  'name': 'Algeria'    5  }    6  ]            `\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level. That is, they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Return data after inserting\n\nWith \\`upsert()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .upsert({ 'id': 1, 'name': 'Algeria' })    4  .select();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan');            `\n\nResponse\n\n`   1  [    2  {    3  \"id\": 1,    4  \"name\": \"Algeria\"    5  }    6  ]            `\n\n* * *\n\n## Order the results\n\nOrders the result with the specified column.\n\n### Parameters\n\n*   columnRequiredString\n    \n    The column to order by.\n    \n*   ascendingOptionalbool\n    \n    Whether to order in ascending order. Default is `false`.\n    \n*   nullsFirstOptionalbool\n    \n    Whether to order nulls first. Default is `false`.\n    \n*   referencedTableOptionalString\n    \n    Specify the referenced table when ordering by a column in an embedded resource.\n    \n\nWith \\`select()\\`On a referenced table\n\n`   1  final data = await supabase    2  .from('countries')    3  .select('id, name')    4  .order('id', ascending: false);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'id': 3,    4  'name': 'Algeria'    5  },    6  {    7  'id': 2,    8  'name': 'Albania'    9  },    10  {    11  'id': 1,    12  'name': 'Afghanistan'    13  }    14  ]            `\n\n* * *\n\n## Limit the number of rows returned\n\nLimits the result with the specified count.\n\n### Parameters\n\n*   countRequiredint\n    \n    The maximum number of rows to return.\n    \n*   referencedTableOptionalint\n    \n    Set this to limit rows of referenced tables instead of the parent table.\n    \n\nWith \\`select()\\`On a referenced table\n\n`   1  final data = await supabase    2  .from('cities')    3  .select('name')    4  .limit(1);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'name': 'Afghanistan'    4  }    5  ]            `\n\n* * *\n\n## Limit the query to a range\n\nLimits the result to rows within the specified range, inclusive.\n\n### Parameters\n\n*   fromRequiredint\n    \n    The starting index from which to limit the result.\n    \n*   toRequiredint\n    \n    The last index to which to limit the result.\n    \n*   referencedTableOptionalString\n    \n    Set this to limit rows of referenced tables instead of the parent table.\n    \n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select('name')    4  .range(0, 1);            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  [    2  {    3  'name': 'Afghanistan'    4  },    5  {    6  'name': 'Albania'    7  }    8  ]            `\n\n* * *\n\n## Retrieve one row of data\n\nRetrieves only one row from the result. Result must be one row (e.g. using limit), otherwise this will result in an error.\n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select('name')    4  .limit(1)    5  .single();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  'name': 'Afghanistan'    3  }            `\n\n* * *\n\n## Retrieve zero or one row of data\n\nWith \\`select()\\`\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .eq('name', 'Singapore')    5  .maybeSingle();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  null            `\n\n* * *\n\n## Retrieve as a CSV\n\nReturn data as CSV\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .csv();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  'id,name\\n1,Afghanistan\\n1,Albania\\n1,Algeria'            `\n\nNotes\n\nBy default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n\n* * *\n\n## Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n*   analyzeOptionalbool\n    \n    If `true`, the query will be executed and the actual run time will be returned.\n    \n*   verboseOptionalbool\n    \n    If `true`, the query identifier will be returned and `data` will include the output columns of the query.\n    \n*   settingsOptionalbool\n    \n    If `true`, include information on configuration parameters that affect query planning.\n    \n*   buffersOptionalbool\n    \n    If `true`, include information on buffer usage.\n    \n*   walOptionalbool\n    \n    If `true`, include information on WAL record generation.\n    \n\nGet the execution planGet the execution plan with analyze and verbose\n\n`   1  final data = await supabase    2  .from('countries')    3  .select()    4  .explain();            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  Aggregate (cost=33.34..33.36 rows=1 width=112)    2  -> Limit (cost=0.00..18.33 rows=1000 width=40)    3  -> Seq Scan on countries (cost=0.00..22.00 rows=1200 width=40)            `\n\nNotes\n\nBy default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n\n* * *\n\n## Create a new user\n\nCreates a new user.\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n*   If signUp() is called for an existing confirmed user:\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n\n### Parameters\n\n*   emailOptionalString\n    \n    User's email address to be used for email authentication.\n    \n*   phoneOptionalString\n    \n    User's phone number to be used for phone authentication.\n    \n*   passwordRequiredString\n    \n    Password to be used for authentication.\n    \n*   emailRedirectToOptionalString\n    \n    The URL to redirect the user to after they confirm their email address.\n    \n*   dataOptionalMap<String, dynamic>\n    \n    The user's metadata to be stored in the user's object.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n*   channelOptionalOtpChannel\n    \n    Messaging channel to use (e.g. whatsapp or sms). Defaults to `OtpChannel.sms`.\n    \n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with additional metadataSign up with redirect URL\n\n`   1  final AuthResponse res = await supabase.auth.signUp(    2  email: 'example@email.com',    3  password: 'example-password',    4  );    5  final Session? session = res.session;    6  final User? user = res.user;            `\n\nResponse\n\n`   1  // Some fields may be null if \"confirm email\" is enabled.    2  AuthResponse(    3  user: const User(    4  id: '11111111-1111-1111-1111-111111111111',    5  aud: 'authenticated',    6  role: 'authenticated',    7  email: 'example@email.com',    8  emailConfirmedAt: '2024-01-01T00:00:00Z',    9  phone: '',    10  lastSignInAt: '2024-01-01T00:00:00Z',    11  appMetadata: {    12  'provider': 'email',    13  'providers': ['email']    14  },    15  userMetadata: {},    16  identities: [    17  UserIdentity(    18  identityId: '22222222-2222-2222-2222-222222222222',    19  id: '11111111-1111-1111-1111-111111111111',    20  userId: '11111111-1111-1111-1111-111111111111',    21  identityData: {    22  'email': 'example@email.com',    23  'email_verified': false,    24  'phone_verified': false,    25  'sub': '11111111-1111-1111-1111-111111111111'    26  },    27  provider: 'email',    28  lastSignInAt: '2024-01-01T00:00:00Z',    29  createdAt: '2024-01-01T00:00:00Z',    30  updatedAt: '2024-01-01T00:00:00Z',    31  ),    32  ],    33  createdAt: '2024-01-01T00:00:00Z',    34  updatedAt: '2024-01-01T00:00:00Z',    35  ),    36  session: Session(    37  accessToken: '<ACCESS_TOKEN>',    38  tokenType: 'bearer',    39  expiresIn: 3600,    40  refreshToken: '<REFRESH_TOKEN>',    41  user: const User(    42  id: '11111111-1111-1111-1111-111111111111',    43  aud: 'authenticated',    44  role: 'authenticated',    45  email: 'example@email.com',    46  emailConfirmedAt: '2024-01-01T00:00:00Z',    47  phone: '',    48  lastSignInAt: '2024-01-01T00:00:00Z',    49  appMetadata: {    50  'provider': 'email',    51  'providers': ['email']    52  },    53  userMetadata: {},    54  identities: [    55  UserIdentity(    56  identityId: '22222222-2222-2222-2222-222222222222',    57  id: '11111111-1111-1111-1111-111111111111',    58  userId: '11111111-1111-1111-1111-111111111111',    59  identityData: {    60  'email': 'example@email.com',    61  'email_verified': false,    62  'phone_verified': false,    63  'sub': '11111111-1111-1111-1111-111111111111'    64  },    65  provider: 'email',    66  lastSignInAt: '2024-01-01T00:00:00Z',    67  createdAt: '2024-01-01T00:00:00Z',    68  updatedAt: '2024-01-01T00:00:00Z',    69  )    70  ],    71  createdAt: '2024-01-01T00:00:00Z',    72  updatedAt: '2024-01-01T00:00:00Z',    73  ),    74  ),    75  );            `\n\n* * *\n\n## Listen to auth events\n\nReceive a notification every time an auth event happens.\n\n*   Types of auth events: `AuthChangeEvent.passwordRecovery`, `AuthChangeEvent.signedIn`, `AuthChangeEvent.signedOut`, `AuthChangeEvent.tokenRefreshed`, `AuthChangeEvent.userUpdated`and `AuthChangeEvent.userDeleted`\n\nListen to auth changesListen to a specific eventUnsubscribe from auth subscription\n\n`   1  final authSubscription = supabase.auth.onAuthStateChange.listen((data) {    2  final AuthChangeEvent event = data.event;    3  final Session? session = data.session;    4      5  print('event: $event, session: $session');    6      7  switch (event) {    8  case AuthChangeEvent.initialSession:    9  // handle initial session    10  case AuthChangeEvent.signedIn:    11  // handle signed in    12  case AuthChangeEvent.signedOut:    13  // handle signed out    14  case AuthChangeEvent.passwordRecovery:    15  // handle password recovery    16  case AuthChangeEvent.tokenRefreshed:    17  // handle token refreshed    18  case AuthChangeEvent.userUpdated:    19  // handle user updated    20  case AuthChangeEvent.userDeleted:    21  // handle user deleted    22  case AuthChangeEvent.mfaChallengeVerified:    23  // handle mfa challenge verified    24  }    25  });            `\n\n* * *\n\n## Create an anonymous user\n\nCreates an anonymous user.\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n*   dataOptionalMap<String, dynamic>\n    \n    The user's metadata to be stored in the user's object.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`   1  await supabase.auth.signInAnonymously();            `\n\nResponse\n\n`   1  AuthResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: '',    7  phone: '',    8  lastSignInAt: '2024-01-01T00:00:00Z',    9  appMetadata: {},    10  userMetadata: {},    11  identities: [],    12  createdAt: '2024-01-01T00:00:00Z',    13  updatedAt: '2024-01-01T00:00:00Z',    14  isAnonymous: true,    15  ),    16  session: Session(    17  accessToken: '<ACCESS_TOKEN>',    18  tokenType: 'bearer',    19  expiresIn: 3600,    20  refreshToken: '<REFRESH_TOKEN>',    21  user: const User(    22  id: '11111111-1111-1111-1111-111111111111',    23  aud: 'authenticated',    24  role: 'authenticated',    25  email: '',    26  phone: '',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  appMetadata: {},    29  userMetadata: {},    30  identities: [],    31  createdAt: '2024-01-01T00:00:00Z',    32  updatedAt: '2024-01-01T00:00:00Z',    33  isAnonymous: true,    34  ),    35  ),    36  );            `\n\n* * *\n\n## Sign in a user\n\nLog in an existing user using email or phone number with password.\n\n*   Requires either an email and password or a phone number and password.\n\n### Parameters\n\n*   emailOptionalString\n    \n    User's email address to be used for email authentication.\n    \n*   phoneOptionalString\n    \n    User's phone number to be used for phone authentication.\n    \n*   passwordRequiredString\n    \n    Password to be used for authentication.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n\nSign in with email and passwordSign in with phone and password\n\n`   1  final AuthResponse res = await supabase.auth.signInWithPassword(    2  email: 'example@email.com',    3  password: 'example-password',    4  );    5  final Session? session = res.session;    6  final User? user = res.user;            `\n\nResponse\n\n`   1  AuthResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  ),    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  session: Session(    36  accessToken: '<ACCESS_TOKEN>',    37  tokenType: 'bearer',    38  expiresIn: 3600,    39  refreshToken: '<REFRESH_TOKEN>',    40  user: const User(    41  id: '11111111-1111-1111-1111-111111111111',    42  aud: 'authenticated',    43  role: 'authenticated',    44  email: 'example@email.com',    45  emailConfirmedAt: '2024-01-01T00:00:00Z',    46  phone: '',    47  lastSignInAt: '2024-01-01T00:00:00Z',    48  appMetadata: {    49  'provider': 'email',    50  'providers': ['email']    51  },    52  userMetadata: {},    53  identities: [    54  UserIdentity(    55  identityId: '22222222-2222-2222-2222-222222222222',    56  id: '11111111-1111-1111-1111-111111111111',    57  userId: '11111111-1111-1111-1111-111111111111',    58  identityData: {    59  'email': 'example@email.com',    60  'email_verified': false,    61  'phone_verified': false,    62  'sub': '11111111-1111-1111-1111-111111111111'    63  },    64  provider: 'email',    65  lastSignInAt: '2024-01-01T00:00:00Z',    66  createdAt: '2024-01-01T00:00:00Z',    67  updatedAt: '2024-01-01T00:00:00Z',    68  )    69  ],    70  createdAt: '2024-01-01T00:00:00Z',    71  updatedAt: '2024-01-01T00:00:00Z',    72  ),    73  ),    74  );            `\n\n* * *\n\n## Sign in with ID Token\n\nAllows you to perform native Google and Apple sign in by combining it with [google\\_sign\\_in](https://pub.dev/packages/google_sign_in) or [sign\\_in\\_with\\_apple](https://pub.dev/packages/sign_in_with_apple) packages.\n\n### Parameters\n\n*   providerRequiredOAuthProvider\n    \n    The provider to perform the sign in with. Currently, `OAuthProvider.google` and `OAuthProvider.apple` are supported.\n    \n*   idTokenRequiredString\n    \n    The identity token obtained from the third-party provider.\n    \n*   accessTokenOptionalString\n    \n    Access token obtained from the third-party provider. Required for Google sign in.\n    \n*   nonceOptionalString\n    \n    Raw nonce value used to perform the third-party sign in. Required for Apple sign-in.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n\nNative Google sign inNative Apple Sign in\n\n`   1  import 'package:google_sign_in/google_sign_in.dart';    2  import 'package:supabase_flutter/supabase_flutter.dart';    3      4  const webClientId = '<web client ID that you registered on Google Cloud, for example my-web.apps.googleusercontent.com>';    5      6  const iosClientId = '<iOS client ID that you registered on Google Cloud, for example my-ios.apps.googleusercontent.com';    7      8  final GoogleSignIn googleSignIn = GoogleSignIn(    9  clientId: iosClientId,    10  serverClientId: webClientId,    11  );    12  final googleUser = await googleSignIn.signIn();    13  final googleAuth = await googleUser!.authentication;    14  final accessToken = googleAuth.accessToken;    15  final idToken = googleAuth.idToken;    16      17  if (accessToken == null) {    18  throw 'No Access Token found.';    19  }    20  if (idToken == null) {    21  throw 'No ID Token found.';    22  }    23      24  final response = await supabase.auth.signInWithIdToken(    25  provider: OAuthProvider.google,    26  idToken: idToken,    27  accessToken: accessToken,    28  );            `\n\nResponse\n\n`   1  AuthResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  ...    12  },    13  userMetadata: {    14  ...    15  },    16  identities: [    17  UserIdentity(    18  identityId: '22222222-2222-2222-2222-222222222222',    19  provider: 'google',    20  ...    21  ),    22  ],    23  createdAt: '2024-01-01T00:00:00Z',    24  updatedAt: '2024-01-01T00:00:00Z',    25  ),    26  session: Session(    27  accessToken: '<ACCESS_TOKEN>',    28  tokenType: 'bearer',    29  expiresIn: 3600,    30  refreshToken: '<REFRESH_TOKEN>',    31  user: const User(    32  id: '11111111-1111-1111-1111-111111111111',    33  aud: 'authenticated',    34  role: 'authenticated',    35  email: 'example@email.com',    36  emailConfirmedAt: '2024-01-01T00:00:00Z',    37  phone: '',    38  lastSignInAt: '2024-01-01T00:00:00Z',    39  appMetadata: {    40  ...    41  },    42  userMetadata: {    43  ...    44  },    45  identities: [    46  UserIdentity(    47  identityId: '22222222-2222-2222-2222-222222222222',    48  provider: 'google',    49  ...    50  )    51  ],    52  createdAt: '2024-01-01T00:00:00Z',    53  updatedAt: '2024-01-01T00:00:00Z',    54  ),    55  ),    56  );            `\n\nNotes\n\nYou can perform native Google sign in on Android and iOS using [google\\_sign\\_in](https://pub.dev/packages/google_sign_in). For platform specific settings, follow the instructions in the package README.\n\nFirst, create client IDs for your app. You need to create a web client ID as well to perform Google sign-in with Supabase.\n\n*   [Steps to obtain web client ID](https://developers.google.com/identity/sign-in/android/start-integrating#configure_a_project)\n*   [Steps to obtain Android client ID](https://developers.google.com/identity/sign-in/android/start-integrating#configure_a_project)\n*   [Steps to obtain iOS client ID](https://developers.google.com/identity/sign-in/ios/start-integrating#get_an_oauth_client_id)\n\nAdd the web client ID to the `Authentication -> Providers -> Google -> Client IDs` section in your Supabase dashboard\n\n* * *\n\n## Sign in a user through OTP\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where an OTP is sent to the user's email or phone number.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or an OTP.\n*   If you're using phone, you can configure whether you want the user to receive an OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify the `SITE_URL` or add additional redirect urls in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n\n### Parameters\n\n*   emailOptionalString\n    \n    Email address to send the magic link or OTP to.\n    \n*   phoneOptionalString\n    \n    Phone number to send the OTP to.\n    \n*   emailRedirectToOptionalString\n    \n    The URL to redirect the user to after they click on the magic link.\n    \n*   shouldCreateUserOptionalbool\n    \n    If set to false, this method will not create a new user. Defaults to true.\n    \n*   dataOptionalMap<String, dynamic>\n    \n    The user's metadata to be stored in the user's object.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n*   channelOptionalOtpChannel\n    \n    Messaging channel to use (e.g. whatsapp or sms). Defaults to `OtpChannel.sms`.\n    \n\nSign in with email.Sign in with SMS OTP.Sign in with WhatsApp OTP\n\n`   1  await supabase.auth.signInWithOtp(    2  email: 'example@email.com',    3  emailRedirectTo: kIsWeb ? null : 'io.supabase.flutter://signin-callback/',    4  );            `\n\nResponse\n\n`   1  AuthResponse(    2  user: null,    3  session: null,    4  );            `\n\nNotes\n\nThe user will be sent an email which contains either a magiclink or an OTP or both. By default, a given user can only request an OTP once every 60 seconds. You can pass `emailRedirectTo` with a dynamic link to bring the users back to your app after they click on the magic link.\n\n* * *\n\n## Sign in a user through OAuth\n\nSigns the user in using third-party OAuth providers.\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n\n### Parameters\n\n*   providerRequiredOAuthProvider\n    \n    The OAuth provider to use for signing in.\n    \n*   redirectToOptionalString\n    \n    The URL to redirect the user to after they sign in with the third-party provider.\n    \n*   scopesOptionalString\n    \n    A list of scopes to request from the third-party provider.\n    \n*   authScreenLaunchModeOptionalLaunchMode\n    \n    The launch mode for the auth screen. Defaults to `LaunchMode.platformDefault`.\n    \n*   queryParamsOptionalMap<String, String>\n    \n    Additional query parameters to be passed to the OAuth flow.\n    \n\nSign in using a third-party providerWith \\`redirectTo\\`With scopes\n\n`   1  await supabase.auth.signInWithOAuth(    2  OAuthProvider.github,    3  redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.    4  authScreenLaunchMode:    5  kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.    6  );            `\n\n* * *\n\n## Sign in a user through SSO\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\n    *   Mapping specific user email addresses with an identity provider.\n    *   Using different hints to identify the correct identity provider, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n*   providerIdOptionalString\n    \n    The ID of the SSO provider to use for signing in.\n    \n*   domainOptionalString\n    \n    The email domain to use for signing in.\n    \n*   redirectToOptionalString\n    \n    The URL to redirect the user to after they sign in with the third-party provider.\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification.\n    \n*   launchModeOptionalLaunchMode\n    \n    The launch mode for the auth screen. Defaults to `LaunchMode.platformDefault`.\n    \n\nSign in with email domainSign in with provider UUID\n\n`   1  await supabase.auth.signInWithSSO(    2  domain: 'company.com',    3  );            `\n\n* * *\n\n## Sign out a user\n\nSigns out the current user, if there is a logged in user.\n\n*   In order to use the `signOut()` method, the user needs to be signed in first.\n\n### Parameters\n\n*   scopeOptionalSignOutScope\n    \n    Whether to sign out from all devices or just the current device. Defaults to `SignOutScope.local`.\n    \n\nSign out\n\n`   1  await supabase.auth.signOut();            `\n\n* * *\n\n## Verify and log in through OTP\n\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite` or `email_change`.\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up or sign in a user.\n\n### Parameters\n\n*   tokenRequiredString\n    \n    The token that user was sent to their email or mobile phone\n    \n*   typeRequiredOtpType\n    \n    Type of the OTP to verify\n    \n*   emailOptionalString\n    \n    Email address that the OTP was sent to\n    \n*   phoneOptionalString\n    \n    Phone number that the OTP was sent to\n    \n*   redirectToOptionalString\n    \n    URI to redirect the user to after the OTP is verified\n    \n*   captchaTokenOptionalString\n    \n    The captcha token to be used for captcha verification\n    \n*   tokenHashOptionalString\n    \n    Token used in an email link\n    \n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)\n\n`   1  final AuthResponse res = await supabase.auth.verifyOTP(    2  type: OtpType.signup,    3  token: token,    4  phone: '+13334445555',    5  );    6  final Session? session = res.session;    7  final User? user = res.user;            `\n\nResponse\n\n`   1  AuthResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  ),    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  session: Session(    36  accessToken: '<ACCESS_TOKEN>',    37  tokenType: 'bearer',    38  expiresIn: 3600,    39  refreshToken: '<REFRESH_TOKEN>',    40  user: const User(    41  id: '11111111-1111-1111-1111-111111111111',    42  aud: 'authenticated',    43  role: 'authenticated',    44  email: 'example@email.com',    45  emailConfirmedAt: '2024-01-01T00:00:00Z',    46  phone: '',    47  lastSignInAt: '2024-01-01T00:00:00Z',    48  appMetadata: {    49  'provider': 'email',    50  'providers': ['email']    51  },    52  userMetadata: {},    53  identities: [    54  UserIdentity(    55  identityId: '22222222-2222-2222-2222-222222222222',    56  id: '11111111-1111-1111-1111-111111111111',    57  userId: '11111111-1111-1111-1111-111111111111',    58  identityData: {    59  'email': 'example@email.com',    60  'email_verified': false,    61  'phone_verified': false,    62  'sub': '11111111-1111-1111-1111-111111111111'    63  },    64  provider: 'email',    65  lastSignInAt: '2024-01-01T00:00:00Z',    66  createdAt: '2024-01-01T00:00:00Z',    67  updatedAt: '2024-01-01T00:00:00Z',    68  )    69  ],    70  createdAt: '2024-01-01T00:00:00Z',    71  updatedAt: '2024-01-01T00:00:00Z',    72  ),    73  ),    74  );            `\n\n* * *\n\n## Retrieve a session\n\nReturns the session data, if there is an active session.\n\nGet the session data\n\n`   1  final Session? session = supabase.auth.currentSession;            `\n\nResponse\n\n`   1  Session(    2  accessToken: '<ACCESS_TOKEN>',    3  tokenType: 'bearer',    4  expiresIn: 3600,    5  refreshToken: '<REFRESH_TOKEN>',    6  user: User(    7  id: '11111111-1111-1111-1111-111111111111',    8  aud: 'authenticated',    9  role: 'authenticated',    10  email: 'example@email.com',    11  emailConfirmedAt: '2024-01-01T00:00:00Z',    12  phone: '',    13  lastSignInAt: '2024-01-01T00:00:00Z',    14  appMetadata: {    15  'provider': 'email',    16  'providers': ['email']    17  },    18  userMetadata: {},    19  identities: [    20  UserIdentity(    21  identityId: '22222222-2222-2222-2222-222222222222',    22  id: '11111111-1111-1111-1111-111111111111',    23  userId: '11111111-1111-1111-1111-111111111111',    24  identityData: {    25  'email': 'example@email.com',    26  'email_verified': false,    27  'phone_verified': false,    28  'sub': '11111111-1111-1111-1111-111111111111'    29  },    30  provider: 'email',    31  lastSignInAt: '2024-01-01T00:00:00Z',    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  )    35  ],    36  createdAt: '2024-01-01T00:00:00Z',    37  updatedAt: '2024-01-01T00:00:00Z',    38  ),    39  );            `\n\n* * *\n\n## Retrieve a new session\n\n*   This method will refresh and return a new session whether the current one is expired or not.\n\nRefresh session using the current session\n\n`   1  final AuthResponse res = await supabase.auth.refreshSession();    2  final session = res.session;            `\n\nResponse\n\n`   1  AuthResponse(    2  user: User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  ),    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  session: Session(    36  accessToken: '<ACCESS_TOKEN>',    37  tokenType: 'bearer',    38  expiresIn: 3600,    39  refreshToken: '<REFRESH_TOKEN>',    40  user: const User(    41  id: '11111111-1111-1111-1111-111111111111',    42  aud: 'authenticated',    43  role: 'authenticated',    44  email: 'example@email.com',    45  emailConfirmedAt: '2024-01-01T00:00:00Z',    46  phone: '',    47  lastSignInAt: '2024-01-01T00:00:00Z',    48  appMetadata: {    49  'provider': 'email',    50  'providers': ['email']    51  },    52  userMetadata: {},    53  identities: [    54  UserIdentity(    55  identityId: '22222222-2222-2222-2222-222222222222',    56  id: '11111111-1111-1111-1111-111111111111',    57  userId: '11111111-1111-1111-1111-111111111111',    58  identityData: {    59  'email': 'example@email.com',    60  'email_verified': false,    61  'phone_verified': false,    62  'sub': '11111111-1111-1111-1111-111111111111'    63  },    64  provider: 'email',    65  lastSignInAt: '2024-01-01T00:00:00Z',    66  createdAt: '2024-01-01T00:00:00Z',    67  updatedAt: '2024-01-01T00:00:00Z',    68  )    69  ],    70  createdAt: '2024-01-01T00:00:00Z',    71  updatedAt: '2024-01-01T00:00:00Z',    72  ),    73  ),    74  );            `\n\n* * *\n\n## Retrieve a user\n\nReturns the user data, if there is a logged in user.\n\nGet the logged in user\n\n`   1  final User? user = supabase.auth.currentUser;            `\n\nResponse\n\n`   1  User(    2  id: '11111111-1111-1111-1111-111111111111',    3  aud: 'authenticated',    4  role: 'authenticated',    5  email: 'example@email.com',    6  emailConfirmedAt: '2024-01-01T00:00:00Z',    7  phone: '',    8  lastSignInAt: '2024-01-01T00:00:00Z',    9  appMetadata: {    10  'provider': 'email',    11  'providers': ['email']    12  },    13  userMetadata: {},    14  identities: [    15  UserIdentity(    16  identityId: '22222222-2222-2222-2222-222222222222',    17  id: '11111111-1111-1111-1111-111111111111',    18  userId: '11111111-1111-1111-1111-111111111111',    19  identityData: {    20  'email': 'example@email.com',    21  'email_verified': false,    22  'phone_verified': false,    23  'sub': '11111111-1111-1111-1111-111111111111'    24  },    25  provider: 'email',    26  lastSignInAt: '2024-01-01T00:00:00Z',    27  createdAt: '2024-01-01T00:00:00Z',    28  updatedAt: '2024-01-01T00:00:00Z',    29  )    30  ],    31  createdAt: '2024-01-01T00:00:00Z',    32  updatedAt: '2024-01-01T00:00:00Z',    33  );            `\n\n* * *\n\n## Update a user\n\nUpdates user data for a logged in user.\n\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n\n### Parameters\n\n*   attributesRequiredUserAttributes\n    \n    Attributes to update for the user.\n    \n    Details\n    \n    *   emailOptionalString\n        \n        The new email address for the user.\n        \n    *   phoneOptionalString\n        \n        The new phone number for the user.\n        \n    *   passwordOptionalString\n        \n        The new password for the user.\n        \n    *   dataOptionalMap<String, dynamic>\n        \n        The user's metadata to be stored in the user's object.\n        \n    *   nonceOptionalString\n        \n        The nonce sent for reauthentication if the user's password is to be updated.\n        \n    \n*   emailRedirectToOptionalString\n    \n    The URI to redirect the user to after the email is updated.\n    \n\nUpdate the email for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`   1  final UserResponse res = await supabase.auth.updateUser(    2  UserAttributes(    3  email: 'example@email.com',    4  ),    5  );    6  final User? updatedUser = res.user;            `\n\nResponse\n\n`   1  UserResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  )    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  );            `\n\nNotes\n\nSends a \"Confirm Email Change\" email to the new email address.\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n*   The user needs to be signed in to call `getUserIdentities()`.\n\nReturns a list of identities linked to the user\n\n`   1  final identities = await supabase.auth.getUserIdentities();            `\n\nResponse\n\n`   1  [    2  UserIdentity(    3  identityId: '22222222-2222-2222-2222-222222222222',    4  id: '2024-01-01T00:00:00Z',    5  userId: '2024-01-01T00:00:00Z',    6  identityData: {    7  'email': 'example@email.com',    8  'email_verified': false,    9  'phone_verified': false,    10  'sub': '11111111-1111-1111-1111-111111111111'    11  },    12  provider: 'email',    13  lastSignInAt: '2024-01-01T00:00:00Z',    14  createdAt: '2024-01-01T00:00:00Z',    15  updatedAt: '2024-01-01T00:00:00Z',    16  )    17  ];            `\n\n* * *\n\n## Link an identity to a user\n\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\n\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n*   The user needs to be signed in to call `linkIdentity()`.\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\n\n### Parameters\n\n*   providerRequiredOAuthProvider\n    \n    The provider to link the identity to.\n    \n*   redirectToOptionalString\n    \n    The URL to redirect the user to after they sign in with the third-party provider.\n    \n*   scopesOptionalString\n    \n    A list of scopes to request from the third-party provider.\n    \n*   authScreenLaunchModeOptionalLaunchMode\n    \n    The launch mode for the auth screen. Defaults to `LaunchMode.platformDefault`.\n    \n*   queryParamsOptionalMap<String, String>\n    \n    Additional query parameters to be passed to the OAuth flow.\n    \n\nLink an identity to a user\n\n`   1  await supabase.auth.linkIdentity(OAuthProvider.google);            `\n\n* * *\n\n## Unlink an identity from a user\n\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n*   The user needs to be signed in to call `unlinkIdentity()`.\n*   The user must have at least 2 identities in order to unlink an identity.\n*   The identity to be unlinked must belong to the user.\n\n### Parameters\n\n*   identityRequiredUserIdentity\n    \n    The user identity to unlink.\n    \n\nUnlink an identity\n\n`   1  // retrieve all identites linked to a user    2  final identities = await supabase.auth.getUserIdentities();    3      4  // find the google identity    5  final googleIdentity = identities.firstWhere(    6  (element) => element.provider == 'google',    7  );    8      9  // unlink the google identity    10  await supabase.auth.unlinkIdentity(googleIdentity);            `\n\n* * *\n\n## Send a password reauthentication nonce\n\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\n*   This method sends a nonce to the user's email. If the user doesn't have a confirmed email address, the method sends the nonce to the user's confirmed phone number instead.\n\nSend reauthentication nonce\n\n`   1  await supabase.auth.reauthenticate();            `\n\nNotes\n\nSends a reauthentication nonce to the user's email or phone number.\n\n* * *\n\n## Resend an OTP\n\n*   Resends a signup confirmation, email change, or phone change email to the user.\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\n*   This method only resend an email or phone OTP to the user if an initial signup, email change, or phone change request was made.\n\nResend an email signup confirmation\n\n`   1  final ResendResponse res = await supabase.auth.resend(    2  type: OtpType.signup,    3  email: 'email@example.com',    4  );            `\n\nNotes\n\nResends the email signup confirmation to the user\n\n* * *\n\n## Set the session data\n\n*   `setSession()` takes in a refresh token and uses it to get a new session.\n*   The refresh token can only be used once to obtain a new session.\n*   [Refresh token rotation](/docs/guides/cli/config#auth.enable_refresh_token_rotation) is enabled by default on all projects to guard against replay attacks.\n*   You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](/docs/guides/cli/config#auth.refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.\n\n### Parameters\n\n*   refreshTokenRequiredString\n    \n    Refresh token to use to get a new session.\n    \n\nRefresh the session\n\n`   1  final refreshToken = supabase.currentSession?.refreshToken ?? '';    2  final AuthResponse response = await supabase.auth.setSession(refreshToken);    3      4  final session = res.session;            `\n\nResponse\n\n`   1  AuthResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  ),    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  session: Session(    36  accessToken: '<ACCESS_TOKEN>',    37  tokenType: 'bearer',    38  expiresIn: 3600,    39  refreshToken: '<REFRESH_TOKEN>',    40  user: const User(    41  id: '11111111-1111-1111-1111-111111111111',    42  aud: 'authenticated',    43  role: 'authenticated',    44  email: 'example@email.com',    45  emailConfirmedAt: '2024-01-01T00:00:00Z',    46  phone: '',    47  lastSignInAt: '2024-01-01T00:00:00Z',    48  appMetadata: {    49  'provider': 'email',    50  'providers': ['email']    51  },    52  userMetadata: {},    53  identities: [    54  UserIdentity(    55  identityId: '22222222-2222-2222-2222-222222222222',    56  id: '11111111-1111-1111-1111-111111111111',    57  userId: '11111111-1111-1111-1111-111111111111',    58  identityData: {    59  'email': 'example@email.com',    60  'email_verified': false,    61  'phone_verified': false,    62  'sub': '11111111-1111-1111-1111-111111111111'    63  },    64  provider: 'email',    65  lastSignInAt: '2024-01-01T00:00:00Z',    66  createdAt: '2024-01-01T00:00:00Z',    67  updatedAt: '2024-01-01T00:00:00Z',    68  )    69  ],    70  createdAt: '2024-01-01T00:00:00Z',    71  updatedAt: '2024-01-01T00:00:00Z',    72  ),    73  ),    74  );            `\n\nNotes\n\nSets the session data from refresh\\_token and returns current session or an error if the refresh\\_token is invalid.\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery means the user doesn't have to store their recovery codes. It also reduces the attack surface since the recovery factor is usually time-limited and not a single static code.\n\nLearn more about implementing MFA on your application on our guide [here](https://supabase.com/docs/guides/auth/auth-mfa#overview).\n\n* * *\n\n## Enroll a factor\n\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\n\n*   Currently, `totp` is the only supported `factorType`. The returned `id` should be used to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/dart/auth-mfa-challenge).\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify).\n*   To create and verify a challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/dart/auth-mfa-challengeandverify).\n\n### Parameters\n\n*   factorTypeOptionalString\n    \n    Type of factor being enrolled.\n    \n*   issuerOptionalString\n    \n    Domain which the user is enrolled with.\n    \n*   friendlyNameOptionalString\n    \n    Human readable name assigned to the factor.\n    \n\nEnroll a time-based, one-time password (TOTP) factor\n\n`   1  final res = await supabase.auth.mfa.enroll(factorType: FactorType.totp);    2      3  final qrCodeUrl = res.totp.qrCode;            `\n\nResponse\n\n`   1  AuthMFAEnrollResponse(    2  id: '<ID>',    3  type: FactorType.totp,    4  totp: TOTPEnrollment(    5  qrCode: '<QR_CODE_AS_SVG_DATA>',    6  secret: '<SECRET>',    7  uri: '<URI>',    8  ),    9  );            `\n\n* * *\n\n## Create a challenge\n\nPrepares a challenge used to verify that a user has access to a MFA factor.\n\n*   An [enrolled factor](/docs/reference/dart/auth-mfa-enroll) is required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify).\n\n### Parameters\n\n*   factorIdRequiredString\n    \n    System assigned identifier for authenticator device as returned by enroll\n    \n\nCreate a challenge for a factor\n\n`   1  final res = await supabase.auth.mfa.challenge(    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  );            `\n\nResponse\n\n`   1  AuthMFAChallengeResponse(    2  id: '<ID>',    3  expiresAt: DateTime.fromMillisecondsSinceEpoch(1700000000),    4  );            `\n\n* * *\n\n## Verify a challenge\n\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\n\n*   To verify a challenge, please [create a challenge](/docs/reference/dart/auth-mfa-challenge) first.\n\n### Parameters\n\n*   factorIdRequiredString\n    \n    System assigned identifier for authenticator device as returned by enroll\n    \n*   challengeIdRequiredString\n    \n    The ID of the challenge to verify\n    \n*   codeRequiredString\n    \n    The verification code on the user's authenticator app\n    \n\nVerify a challenge for a factor\n\n`   1  final res = await supabase.auth.mfa.verify(    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    4  code: '123456',    5  );            `\n\nResponse\n\n`   1  AuthMFAVerifyResponse(    2  accessToken: '<ACCESS_TOKEN>',    3  tokenType: 'Bearer',    4  expiresIn: Duration(seconds: 3600),    5  refreshToken: '<REFRESH_TOKEN>',    6  user: User(    7  id: '11111111-1111-1111-1111-111111111111',    8  aud: 'authenticated',    9  role: 'authenticated',    10  email: 'example@email.com',    11  emailConfirmedAt: '2024-01-01T00:00:00Z',    12  phone: '',    13  lastSignInAt: '2024-01-01T00:00:00Z',    14  appMetadata: {    15  'provider': 'email',    16  'providers': ['email']    17  },    18  userMetadata: {},    19  identities: [    20  UserIdentity(    21  identityId: '22222222-2222-2222-2222-222222222222',    22  id: '11111111-1111-1111-1111-111111111111',    23  userId: '11111111-1111-1111-1111-111111111111',    24  identityData: {    25  'email': 'example@email.com',    26  'email_verified': false,    27  'phone_verified': false,    28  'sub': '11111111-1111-1111-1111-111111111111'    29  },    30  provider: 'email',    31  lastSignInAt: '2024-01-01T00:00:00Z',    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  ],    36  createdAt: '2024-01-01T00:00:00Z',    37  updatedAt: '2024-01-01T00:00:00Z',    38  isAnonymous: false,    39  factors: [    40  Factor(    41  id: '<ID>',    42  friendlyName: 'Important Auth App',    43  factorType: FactorType.totp,    44  status: 'verified',    45  createdAt: '2024-01-01T00:00:00Z',    46  updatedAt: '2024-01-01T00:00:00Z'    47  )    48  ]    49  )    50  );            `\n\n* * *\n\n## Create and verify a challenge\n\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\n\n*   An [enrolled factor](/docs/reference/dart/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/dart/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify) in a single step.\n\n### Parameters\n\n*   factorIdRequiredString\n    \n    System assigned identifier for authenticator device as returned by enroll\n    \n*   codeRequiredString\n    \n    The verification code on the user's authenticator app\n    \n\nCreate and verify a challenge for a factor\n\n`   1  final res = await supabase.auth.mfa.challengeAndVerify(    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  code: '123456',    4  );            `\n\nResponse\n\n`   1  AuthMFAVerifyResponse(    2  accessToken: '<ACCESS_TOKEN>',    3  tokenType: 'Bearer',    4  expiresIn: Duration(seconds: 3600),    5  refreshToken: '<REFRESH_TOKEN>',    6  user: User(    7  id: '11111111-1111-1111-1111-111111111111',    8  aud: 'authenticated',    9  role: 'authenticated',    10  email: 'example@email.com',    11  emailConfirmedAt: '2024-01-01T00:00:00Z',    12  phone: '',    13  lastSignInAt: '2024-01-01T00:00:00Z',    14  appMetadata: {    15  'provider': 'email',    16  'providers': ['email']    17  },    18  userMetadata: {},    19  identities: [    20  UserIdentity(    21  identityId: '22222222-2222-2222-2222-222222222222',    22  id: '11111111-1111-1111-1111-111111111111',    23  userId: '11111111-1111-1111-1111-111111111111',    24  identityData: {    25  'email': 'example@email.com',    26  'email_verified': false,    27  'phone_verified': false,    28  'sub': '11111111-1111-1111-1111-111111111111'    29  },    30  provider: 'email',    31  lastSignInAt: '2024-01-01T00:00:00Z',    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  ],    36  createdAt: '2024-01-01T00:00:00Z',    37  updatedAt: '2024-01-01T00:00:00Z',    38  isAnonymous: false,    39  factors: [    40  Factor(    41  id: '<ID>',    42  friendlyName: 'Important Auth App',    43  factorType: FactorType.totp,    44  status: 'verified',    45  createdAt: '2024-01-01T00:00:00Z',    46  updatedAt: '2024-01-01T00:00:00Z'    47  )    48  ]    49  )    50  );            `\n\n* * *\n\n## Unenroll a factor\n\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\n\n### Parameters\n\n*   factorIdRequiredString\n    \n    System assigned identifier for authenticator device as returned by enroll\n    \n\nUnenroll a factor\n\n`   1  final res = await supabase.auth.mfa.unenroll(    2  '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  );            `\n\nResponse\n\n`   1  AuthMFAUnenrollResponse(    2  id: '<FACTOR_ID>',    3  );            `\n\n* * *\n\n## Get Authenticator Assurance Level\n\nReturns the Authenticator Assurance Level (AAL) for the active session.\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` means the user has signed in with their first factor, such as email, password, or OAuth sign-in. An AAL of `aal2` means the user has also signed in with their second factor, such as a time-based, one-time-password (TOTP).\n*   If the user has a verified factor, the `nextLevel` field returns `aal2`. Otherwise, it returns `aal1`.\n\nGet the AAL details of a session\n\n`   1  final res = supabase.auth.mfa.getAuthenticatorAssuranceLevel();    2  final currentLevel = res.currentLevel;    3  final nextLevel = res.nextLevel;    4  final currentAuthenticationMethods = res.currentAuthenticationMethods;            `\n\nResponse\n\n`   1  AuthMFAGetAuthenticatorAssuranceLevelResponse(    2  currentLevel: AuthenticatorAssuranceLevels.aal1,    3  nextLevel: AuthenticatorAssuranceLevels.aal2,    4  currentAuthenticationMethods: [    5  AMREntry(    6  method: AMRMethod.password,    7  timestamp: DateTime.fromMillisecondsSinceEpoch(1700000000000),    8  )    9  ]    10  }            `\n\n* * *\n\n## Auth Admin\n\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the Flutter app.\n\nCreate server-side auth client\n\n`   1  final supabase = SupabaseClient(supabaseUrl, serviceRoleKey);            `\n\n* * *\n\n## Retrieve a user\n\nGet user by id.\n\n*   Fetches the user object from the database based on the user's id.\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n*   uidRequiredString\n    \n    User ID of the user to fetch.\n    \n\nFetch the user object using the access\\_token jwt\n\n`   1  final res = await supabase.auth.admin.getUserById(userId);    2  final user = res.user;            `\n\nResponse\n\n`   1  UserResponse(    2  user: const User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  )    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  );            `\n\n* * *\n\n## List all users\n\nGet a list of users.\n\n*   Defaults to return 50 users per page.\n\n### Parameters\n\n*   pageOptionalint\n    \n    What page of users to return.\n    \n*   pageOptionalint\n    \n    How many users to be returned per page. Defaults to 50.\n    \n\nGet a page of usersPaginated list of users\n\n`   1  // Returns the first 50 users.    2  final List<User> users = await supabase.auth.admin.listUsers();            `\n\nResponse\n\n`   1  [    2  User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'example@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'example@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  )    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  )    35  ]            `\n\n* * *\n\n## Create a user\n\nCreates a new user.\n\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/dart/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n*   attributesRequiredAdminUserAttributes\n    \n    Attributes to create the user with.\n    \n    Details\n    \n    *   emailRequiredString\n        \n        The email address of the user.\n        \n    *   passwordRequiredString\n        \n        The password of the user.\n        \n    *   phoneOptionalString\n        \n        The phone number of the user.\n        \n    *   userMetadataOptionalMap<String, dynamic>\n        \n        A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n        \n    *   appMetadataOptionalMap<String, dynamic>\n        \n        A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n        \n    *   emailConfirmOptionalbool\n        \n        Whether to confirm the user's email address.\n        \n    *   phoneConfirmOptionalbool\n        \n        Whether to confirm the user's phone number.\n        \n    *   banDurationOptionalString\n        \n        Determines how long a user is banned for. Some possible durations include '300ms', '2h45m'.\n        \n    \n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`   1  final res = await supabase.auth.admin.createUser(AdminUserAttributes(    2  email: 'user@email.com',    3  password: 'password',    4  userMetadata: {'name': 'Yoda'},    5  ));            `\n\nResponse\n\n`   1  UserResponse(    2  user: User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'user@email.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {'name': 'Yoda'},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'user@email.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  )    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  );            `\n\n* * *\n\n## Delete a user\n\nDelete a user.\n\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n*   idRequiredString\n    \n    ID of the user to be deleted.\n    \n\nRemoves a user\n\n`   1  await supabase.auth.admin    2  .deleteUser('715ed5db-f090-4b8c-a067-640ecee36aa0');            `\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to the user's email address.\n\n### Parameters\n\n*   emailRequiredString\n    \n    Email address of the user to invite.\n    \n*   redirectToOptionalString\n    \n    URI to redirect the user to after they open the invite link.\n    \n*   dataOptionalMap<String, dynamic>\n    \n    A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n    \n\nInvite a user\n\n`   1  final UserResponse res = await supabase.auth.admin    2  .inviteUserByEmail('email@example.com');    3  final User? user = res.user;            `\n\nResponse\n\n`   1  UserResponse(    2  user: User(    3  id: '11111111-1111-1111-1111-111111111111',    4  aud: 'authenticated',    5  role: 'authenticated',    6  email: 'email@example.com',    7  emailConfirmedAt: '2024-01-01T00:00:00Z',    8  phone: '',    9  lastSignInAt: '2024-01-01T00:00:00Z',    10  appMetadata: {    11  'provider': 'email',    12  'providers': ['email']    13  },    14  userMetadata: {},    15  identities: [    16  UserIdentity(    17  identityId: '22222222-2222-2222-2222-222222222222',    18  id: '11111111-1111-1111-1111-111111111111',    19  userId: '11111111-1111-1111-1111-111111111111',    20  identityData: {    21  'email': 'email@example.com',    22  'email_verified': false,    23  'phone_verified': false,    24  'sub': '11111111-1111-1111-1111-111111111111'    25  },    26  provider: 'email',    27  lastSignInAt: '2024-01-01T00:00:00Z',    28  createdAt: '2024-01-01T00:00:00Z',    29  updatedAt: '2024-01-01T00:00:00Z',    30  )    31  ],    32  createdAt: '2024-01-01T00:00:00Z',    33  updatedAt: '2024-01-01T00:00:00Z',    34  ),    35  );            `\n\n* * *\n\n## Generate an email link\n\nGenerates email links and OTPs to be sent via a custom email provider.\n\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `emailChangeCurrent`, `emailChangeNew`, `phoneChange`.\n*   `generateLink()` only generates the email link for `email_change_email` if the \"Secure email change\" setting is enabled under the \"Email\" provider in your Supabase project.\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n*   typeRequiredGenerateLinkType\n    \n    The type of invite link to generate.\n    \n*   emailRequiredString\n    \n    Email address of the user to invite.\n    \n*   passwordOptionalString\n    \n    Password for the user. Required for `signup` type.\n    \n*   redirectToOptionalString\n    \n    URI to redirect the user to after they open the invite link.\n    \n*   dataOptionalMap<String, dynamic>\n    \n    A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n    \n\nGenerate a signup link\n\n`   1  final res = await supabase.auth.admin.generateLink(    2  type: GenerateLinkType.signup,    3  email: 'email@example.com',    4  password: 'secret',    5  );    6  final actionLink = res.properties.actionLink;            `\n\nResponse\n\n`   1  GenerateLinkResponse(    2  properties: GenerateLinkProperties(    3  actionLink: '<LINK_TO_SEND_TO_USER>',    4  emailOtp: '999999',    5  hashedToken: '<HASHED_TOKEN',    6  redirectTo: '<REDIRECT_URL>',    7  verificationType: GenerateLinkType.signup    8  ),    9  user: User(    10  id: '11111111-1111-1111-1111-111111111111',    11  aud: 'authenticated',    12  role: 'authenticated',    13  email: 'email@example.com',    14  emailConfirmedAt: '2024-01-01T00:00:00Z',    15  phone: '',    16  lastSignInAt: '2024-01-01T00:00:00Z',    17  appMetadata: {    18  'provider': 'email',    19  'providers': ['email']    20  },    21  userMetadata: {},    22  identities: [    23  UserIdentity(    24  identityId: '22222222-2222-2222-2222-222222222222',    25  id: '11111111-1111-1111-1111-111111111111',    26  userId: '11111111-1111-1111-1111-111111111111',    27  identityData: {    28  'email': 'email@example.com',    29  'email_verified': false,    30  'phone_verified': false,    31  'sub': '11111111-1111-1111-1111-111111111111'    32  },    33  provider: 'email',    34  lastSignInAt: '2024-01-01T00:00:00Z',    35  createdAt: '2024-01-01T00:00:00Z',    36  updatedAt: '2024-01-01T00:00:00Z',    37  )    38  ],    39  createdAt: '2024-01-01T00:00:00Z',    40  updatedAt: '2024-01-01T00:00:00Z',    41  )    42  )            `\n\n* * *\n\n## Update a user\n\n### Parameters\n\n*   uidRequiredGenerateLinkType\n    \n    User ID of the user to update.\n    \n*   attributesRequiredAdminUserAttributes\n    \n    Attributes to update for the user.\n    \n    Details\n    \n    *   emailRequiredString\n        \n        The email address of the user.\n        \n    *   passwordRequiredString\n        \n        The password of the user.\n        \n    *   phoneOptionalString\n        \n        The phone number of the user.\n        \n    *   userMetadataOptionalMap<String, dynamic>\n        \n        A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n        \n    *   appMetadataOptionalMap<String, dynamic>\n        \n        A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n        \n    *   emailConfirmOptionalbool\n        \n        Whether to confirm the user's email address.\n        \n    *   phoneConfirmOptionalbool\n        \n        Whether to confirm the user's phone number.\n        \n    *   banDurationOptionalString\n        \n        Determines how long a user is banned for. Some possible durations include '300ms', '2h45m'.\n        \n    \n\nUpdates a user's email\n\n`   1  await supabase.auth.admin.updateUserById(    2  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',    3  attributes: AdminUserAttributes(    4  email: 'new@email.com',    5  ),    6  );            `\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.\n\n*   Requires an Authorization header.\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.\n\n### Parameters\n\n*   functionNameRequiredString\n    \n    The name of the function to invoke.\n    \n*   headersOptionalMap<String, String>\n    \n    Custom headers to send with the request.\n    \n*   bodyOptionalMap<String, String>\n    \n    The body of the request.\n    \n*   methodOptionalHttpMethod\n    \n    HTTP method of the request. Defaults to POST.\n    \n\nBasic invocation.Specifying response type.Parsing custom headers.\n\n`   1  final res = await supabase.functions.invoke('hello', body: {'foo': 'baa'});    2  final data = res.data;            `\n\n* * *\n\n## Listen to database changes\n\nReturns real-time data from your table as a `Stream`.\n\n*   Realtime is disabled by default for new tables. You can turn it on by [managing replication](/docs/guides/realtime/postgres-changes#replication-setup).\n*   `stream()` will emit the initial data as well as any further change on the database as `Stream<List<Map<String, dynamic>>>` by combining Postgrest and Realtime.\n*   Takes a list of primary key column names that will be used to update and delete the proper records within the SDK.\n*   The following filters are available\n    *   `.eq('column', value)` listens to rows where the column equals the value\n    *   `.neq('column', value)` listens to rows where the column does not equal the value\n    *   `.gt('column', value)` listens to rows where the column is greater than the value\n    *   `.gte('column', value)` listens to rows where the column is greater than or equal to the value\n    *   `.lt('column', value)` listens to rows where the column is less than the value\n    *   `.lte('column', value)` listens to rows where the column is less than or equal to the value\n    *   `.inFilter('column', [val1, val2, val3])` listens to rows where the column is one of the values\n\nListen to a tableWith filter, order and limitWith an IN filterUsing \\`stream()\\` with \\`StreamBuilder\\`\n\n`   1  supabase.from('countries')    2  .stream(primaryKey: ['id'])    3  .listen((List<Map<String, dynamic>> data) {    4  // Do something awesome with the data    5  });            `\n\n* * *\n\n## Subscribe to channel\n\nSubscribe to realtime changes in your database.\n\n*   Realtime is disabled by default for new tables. You can turn it on by [managing replication](/docs/guides/realtime/postgres-changes#replication-setup).\n*   If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n\nListen to database changesListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changesListen to broadcast messagesListen to presence events\n\n`   1  supabase    2  .channel('public:countries')    3  .onPostgresChanges(    4  event: PostgresChangeEvent.all,    5  schema: 'public',    6  table: 'countries',    7  callback: (payload) {    8  print('Change received: ${payload.toString()}');    9  })    10  .subscribe();            `\n\n* * *\n\n## Unsubscribe from a channel\n\nUnsubscribes and removes Realtime channel from Realtime client.\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove a channel\n\n`   1  final status = await supabase.removeChannel(channel);            `\n\n* * *\n\n## Unsubscribe from all channels\n\nUnsubscribes and removes all Realtime channels from Realtime client.\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\nRemove all channels\n\n`   1  final statuses = await supabase.removeAllChannels();            `\n\n* * *\n\n## Retrieve all channels\n\nReturns all Realtime channels.\n\nGet all channels\n\n`   1  final channels = supabase.getChannels();            `\n\n* * *\n\n## Create a bucket\n\nCreates a new Storage bucket\n\n*   Policy permissions required:\n    *   `buckets` permissions: `insert`\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredString\n    \n    A unique identifier for the bucket you are creating.\n    \n*   bucketOptionsOptionalBucketOptions\n    \n    A parameter to optionally make the bucket public.\n    \n    Details\n    \n    *   publicRequiredbool\n        \n        The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n        \n    *   fileSizeLimitOptionalString\n        \n        Specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit.\n        \n    *   allowedMimeTypesOptionalList<String>\n        \n        Specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/\\*, or a specific mime type, e.g. image/png.\n        \n    \n\nCreate bucket\n\n`   1  final String bucketId = await supabase    2  .storage    3  .createBucket('avatars');            `\n\nResponse\n\n`   1  'avatars'            `\n\n* * *\n\n## Retrieve a bucket\n\nRetrieves the details of an existing Storage bucket.\n\n*   Policy permissions required:\n    *   `buckets` permissions: `select`\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredString\n    \n    The unique identifier of the bucket you would like to retrieve.\n    \n\nGet bucket\n\n`   1  final Bucket bucket = await supabase    2  .storage    3  .getBucket('avatars');            `\n\nResponse\n\n`   1  Bucket(    2  id: 'avatars',    3  name: 'avatars',    4  owner: '',    5  public: false,    6  file_size_limit: 1024,    7  allowed_mime_types: [    8  'image/png'    9  ],    10  created_at: '2024-05-22T22:26:05.100Z',    11  updated_at: '2024-05-22T22:26:05.100Z'    12  )            `\n\n* * *\n\n## List all buckets\n\nRetrieves the details of all Storage buckets within an existing product.\n\n*   Policy permissions required:\n    *   `buckets` permissions: `select`\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\nList buckets\n\n`   1  final List<Bucket> buckets = await supabase    2  .storage    3  .listBuckets();            `\n\nResponse\n\n`   1  [    2  Bucket(    3  id: 'avatars',    4  name: 'avatars',    5  owner: '',    6  public: false,    7  file_size_limit: 1024,    8  allowed_mime_types: [    9  'image/png'    10  ],    11  created_at: '2024-05-22T22:26:05.100Z',    12  updated_at: '2024-05-22T22:26:05.100Z'    13  ),    14  ]            `\n\n* * *\n\n## Update a bucket\n\nUpdates a new Storage bucket\n\n*   Policy permissions required:\n    *   `buckets` permissions: `update`\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredString\n    \n    A unique identifier for the bucket you are updating.\n    \n*   bucketOptionsRequiredBucketOptions\n    \n    A parameter to optionally make the bucket public.\n    \n    Details\n    \n    *   publicRequiredbool\n        \n        The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n        \n    *   fileSizeLimitOptionalString\n        \n        Specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit.\n        \n    *   allowedMimeTypesOptionalList<String>\n        \n        Specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/\\*, or a specific mime type, e.g. image/png.\n        \n    \n\nUpdate bucket\n\n`   1  final String res = await supabase    2  .storage    3  .updateBucket('avatars', const BucketOptions(public: false));            `\n\nResponse\n\n`   1  'Successfully updated'            `\n\n* * *\n\n## Delete a bucket\n\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n\n*   Policy permissions required:\n    *   `buckets` permissions: `select` and `delete`\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredString\n    \n    A unique identifier for the bucket you are deleting.\n    \n\nDelete bucket\n\n`   1  final String res = await supabase    2  .storage    3  .deleteBucket('avatars');            `\n\nResponse\n\n`   1  'Successfully deleted'            `\n\n* * *\n\n## Empty a bucket\n\nRemoves all objects inside a single bucket.\n\n*   Policy permissions required:\n    *   `buckets` permissions: `select`\n    *   `objects` permissions: `select` and `delete`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredString\n    \n    A unique identifier for the bucket you are emptying.\n    \n\nEmpty bucket\n\n`   1  final String res = await supabase    2  .storage    3  .emptyBucket('avatars');            `\n\nResponse\n\n`   1  'Successfully emptied'            `\n\n* * *\n\n## Upload a file\n\nUploads a file to an existing bucket.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `insert`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to update.\n    \n*   fileRequiredFile or Uint8List\n    \n    File object to be stored in the bucket.\n    \n*   fileOptionsOptionalFileOptions\n    \n    Details\n    \n    *   cacheControlOptionalString\n        \n        The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control` header as `max-age=<seconds>`. Defaults to 3600 seconds.\n        \n    *   upsertOptionalbool\n        \n        When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false.\n        \n    *   contentTypeOptionalString\n        \n        The `Content-Type` header value. Gets parsed with MediaType.parse(mime). Throws a FormatError if the media type is invalid.\n        \n    \n*   retryAttemptsOptionalint\n    \n    Sets the retryAttempts parameter set across the storage client. Defaults to 10.\n    \n*   retryControllerOptionalStorageRetryController\n    \n    Pass a RetryController instance and call `cancel()` to cancel the retry attempts.\n    \n\nUpload fileUpload file on web\n\n`   1  final avatarFile = File('path/to/file');    2  final String fullPath = await supabase.storage.from('avatars').upload(    3  'public/avatar1.png',    4  avatarFile,    5  fileOptions: const FileOptions(cacheControl: '3600', upsert: false),    6  );            `\n\nResponse\n\n`   1  'avatars/public/avatar1.png'            `\n\n* * *\n\n## Download a file\n\nDownloads a file.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The full path and file name of the file to be downloaded. For example folder/image.png.\n    \n*   transformOptionalTransformOptions\n    \n    Transform the asset before serving it to the client.\n    \n    Details\n    \n    *   widthOptionalint\n        \n        The width of the image in pixels.\n        \n    *   heightOptionalint\n        \n        The height of the image in pixels.\n        \n    *   resizeOptionalResizeMode\n        \n        Specifies how image cropping should be handled when performing image transformations. Defaults to `ResizeMode.cover`.\n        \n    *   qualityOptionalint\n        \n        Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80\n        \n    *   formatOptionalRequestImageFormat\n        \n        Specify the format of the image requested. When using 'origin' we force the format to be the same as the original image. When this option is not passed in, images are optimized to modern image formats like Webp.\n        \n    \n\nDownload fileWith transform\n\n`   1  final Uint8List file = await supabase    2  .storage    3  .from('avatars')    4  .download('avatar1.png');            `\n\nResponse\n\n`   1  <Blob>            `\n\n* * *\n\n## List all files in a bucket\n\nLists all the files within a bucket.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The folder path.\n    \n*   searchOptionsOptionalSearchOptions\n    \n    Options for the search operations such as limit and offset.\n    \n    Details\n    \n    *   limitOptionalint\n        \n        The number of files you want to be returned.\n        \n    *   offsetOptionalint\n        \n        The starting position.\n        \n    *   sortByOptionalSortBy\n        \n        The column to sort by. Can be any column inside a FileObject.\n        \n        Details\n        \n    *   searchOptionalString\n        \n        The search string to filter files by.\n        \n    \n\nList files in a bucket\n\n`   1  final List<FileObject> objects = await supabase    2  .storage    3  .from('avatars')    4  .list();            `\n\nResponse\n\n`   1  [    2  FileObject(    3  name: 'avatar1.png',    4  id: 'e668cf7f-821b-4a2f-9dce-7dfa5dd1cfd2',    5  updated_at: '2024-05-22T23:06:05.580Z',    6  created_at: '2024-05-22T23:04:34.443Z',    7  last_accessed_at: '2024-05-22T23:04:34.443Z',    8  metadata: {    9  eTag: 'c5e8c553235d9af30ef4f6e280790b92',    10  size: 32175,    11  mimetype: 'image/png',    12  cacheControl: 'max-age=3600',    13  lastModified: '2024-05-22T23:06:05.574Z',    14  contentLength: 32175,    15  httpStatusCode: 200    16  ),    17  ]            `\n\n* * *\n\n## Replace an existing file\n\nReplaces an existing file at the specified path with a new one.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `update` and `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to update.\n    \n*   fileRequiredFile or Uint8List\n    \n    File object to be stored in the bucket.\n    \n*   fileOptionsOptionalFileOptions\n    \n    Details\n    \n    *   cacheControlOptionalString\n        \n        The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control` header as `max-age=<seconds>`. Defaults to 3600 seconds.\n        \n    *   upsertOptionalbool\n        \n        When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false.\n        \n    *   contentTypeOptionalString\n        \n        The `Content-Type` header value. Gets parsed with MediaType.parse(mime). Throws a FormatError if the media type is invalid.\n        \n    \n*   retryAttemptsOptionalint\n    \n    Sets the retryAttempts parameter set across the storage client. Defaults to 10.\n    \n*   retryControllerOptionalStorageRetryController\n    \n    Pass a RetryController instance and call `cancel()` to cancel the retry attempts.\n    \n\nUpdate fileUpdate file on web\n\n`   1  final avatarFile = File('path/to/local/file');    2  final String path = await supabase.storage.from('avatars').update(    3  'public/avatar1.png',    4  avatarFile,    5  fileOptions: const FileOptions(cacheControl: '3600', upsert: false),    6  );            `\n\nResponse\n\n`   1  'avatars/public/avatar1.png'            `\n\n* * *\n\n## Move an existing file\n\nMoves an existing file, optionally renaming it at the same time.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `update` and `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   fromPathRequiredString\n    \n    The original file path, including the current file name. For example folder/image.png.\n    \n*   toPathRequiredString\n    \n    The new file path, including the new file name. For example folder/image-new.png.\n    \n\nMove file\n\n`   1  final String result = await supabase    2  .storage    3  .from('avatars')    4  .move('public/avatar1.png', 'private/avatar2.png');            `\n\nResponse\n\n`   1  'Successfully moved'            `\n\n* * *\n\n## Delete files in a bucket\n\nDeletes files within the same bucket\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `delete` and `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathsRequiredList<String>\n    \n    A list of files to delete, including the path and file name. For example \\['folder/image.png'\\].\n    \n\nDelete file\n\n`   1  final List<FileObject> objects = await supabase    2  .storage    3  .from('avatars')    4  .remove(['avatar1.png']);            `\n\nResponse\n\n`   1  [    2  FileObject(    3  name: 'avatar1.png',    4  id: 'e668cf7f-821b-4a2f-9dce-7dfa5dd1cfd2',    5  updated_at: '2024-05-22T23:06:05.580Z',    6  created_at: '2024-05-22T23:04:34.443Z',    7  last_accessed_at: '2024-05-22T23:04:34.443Z',    8  metadata: {    9  eTag: 'c5e8c553235d9af30ef4f6e280790b92',    10  size: 32175,    11  mimetype: 'image/png',    12  cacheControl: 'max-age=3600',    13  lastModified: '2024-05-22T23:06:05.574Z',    14  contentLength: 32175,    15  httpStatusCode: 200    16  ),    17  ]            `\n\n* * *\n\n## Create a signed URL\n\nCreate signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: `select`\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The file path, including the file name. For example folder/image.png.\n    \n*   expiresInRequiredint\n    \n    The number of seconds until the signed URL expires. For example, 60 for a URL which is valid for one minute.\n    \n*   transformOptionalTransformOptions\n    \n    Transform the asset before serving it to the client.\n    \n    Details\n    \n    *   widthOptionalint\n        \n        The width of the image in pixels.\n        \n    *   heightOptionalint\n        \n        The height of the image in pixels.\n        \n    *   resizeOptionalResizeMode\n        \n        Specifies how image cropping should be handled when performing image transformations. Defaults to `ResizeMode.cover`.\n        \n    *   qualityOptionalint\n        \n        Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80\n        \n    *   formatOptionalRequestImageFormat\n        \n        Specify the format of the image requested. When using 'origin' we force the format to be the same as the original image. When this option is not passed in, images are optimized to modern image formats like Webp.\n        \n    \n\nCreate Signed URLWith transform\n\n`   1  final String signedUrl = await supabase    2  .storage    3  .from('avatars')    4  .createSignedUrl('avatar1.png', 60);            `\n\n* * *\n\n## Retrieve public URL\n\nRetrieve URLs for assets in public buckets\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/dart/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n*   Policy permissions required:\n    *   `buckets` permissions: none\n    *   `objects` permissions: none\n*   Refer to the [Storage guide](https://supabase.com/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredString\n    \n    The path and name of the file to generate the public URL for. For example folder/image.png.\n    \n*   transformOptionalTransformOptions\n    \n    Transform the asset before serving it to the client.\n    \n    Details\n    \n    *   widthOptionalint\n        \n        The width of the image in pixels.\n        \n    *   heightOptionalint\n        \n        The height of the image in pixels.\n        \n    *   resizeOptionalResizeMode\n        \n        Specifies how image cropping should be handled when performing image transformations. Defaults to `ResizeMode.cover`.\n        \n    *   qualityOptionalint\n        \n        Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80\n        \n    *   formatOptionalRequestImageFormat\n        \n        Specify the format of the image requested. When using 'origin' we force the format to be the same as the original image. When this option is not passed in, images are optimized to modern image formats like Webp.\n        \n    \n\nReturns the URL for an asset in a public bucketWith transform\n\n`   1  final String publicUrl = supabase    2  .storage    3  .from('public-bucket')    4  .getPublicUrl('avatar1.png');            `\n\nResponse\n\n`   1  'https://example.supabase.co/storage/v1/object/public/public-bucket/folder/avatar1.png'            `\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•Privacy settings\n    \n    Accept Opt out Privacy settings"
},
{
  "url": "https://supabase.com/docs/reference/javascript/introduction",
  "markdown": "JavaScript API Reference | Supabase Docs\n\nJavascript Reference v2.0\n\n# JavaScript Client Library\n\n@supabase/supabase-js[View on GitHub](https://github.com/supabase/supabase-js)\n\nThis reference documents every object and method available in Supabase's isomorphic JavaScript library, `supabase-js`. You can use `supabase-js` to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.\n\nTo convert SQL queries to `supabase-js` calls, use the [SQL to REST API translator](/docs/guides/api/sql-to-rest).\n\n* * *\n\n## Installing\n\n### Install as package[#](#install-as-package)\n\nYou can install @supabase/supabase-js via the terminal.\n\nnpmYarnpnpm\n\nTerminal\n\n`   1  npm install @supabase/supabase-js            `\n\n### Install via CDN[#](#install-via-cdn)\n\nYou can install @supabase/supabase-js via CDN links.\n\n`   1  <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>    2  //or    3  <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>            `\n\n### Use at runtime in Deno[#](#use-at-runtime-in-deno)\n\nYou can use supabase-js in the Deno runtime via [JSR](https://jsr.io/@supabase/supabase-js):\n\n`   1  import { createClient } from 'jsr:@supabase/supabase-js@2'            `\n\n* * *\n\n## Initializing\n\nCreate a new client for use in the browser.\n\nYou can initialize a new Supabase client using the `createClient()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n### Parameters\n\n*   supabaseUrlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabaseKeyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalSupabaseClientOptions\n    \n    Details\n    \n    *   authOptionalobject\n        \n        Details\n        \n    *   dbOptionalobject\n        \n        The Postgres schema which your tables belong to. Must be on the list of exposed schemas in Supabase. Defaults to `public`.\n        \n        Details\n        \n    *   globalOptionalobject\n        \n        Details\n        \n    *   realtimeOptional@supabase/realtime-js.RealtimeClientOptions\n        \n        Options passed to the realtime-js instance\n        \n    \n\nCreating a clientWith a custom domainWith additional parametersWith custom schemasCustom fetch implementationReact Native options with AsyncStorageReact Native options with Expo SecureStore\n\n`   1  import { createClient } from '@supabase/supabase-js'    2      3  // Create a single supabase client for interacting with your database    4  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')            `\n\n* * *\n\n## TypeScript support\n\n`supabase-js` has TypeScript support for type inference, autocompletion, type-safe queries, and more.\n\nWith TypeScript, `supabase-js` detects things like `not null` constraints and [generated columns](https://www.postgresql.org/docs/current/ddl-generated-columns.html). Nullable columns are typed as `T | null` when you select the column. Generated columns will show a type error when you insert to it.\n\n`supabase-js` also detects relationships between tables. A referenced table with one-to-many relationship is typed as `T[]`. Likewise, a referenced table with many-to-one relationship is typed as `T | null`.\n\n## Generating TypeScript Types[#](#generating-typescript-types)\n\nYou can use the Supabase CLI to [generate the types](/docs/reference/cli/supabase-gen-types). You can also generate the types [from the dashboard](https://supabase.com/dashboard/project/_/api?page=tables-intro).\n\nTerminal\n\n`   1  supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts            `\n\nThese types are generated from your database schema. Given a table `public.movies`, the generated types will look like:\n\n`   1  create table public.movies (    2  id bigint generated always as identity primary key,    3  name text not null,    4  data jsonb null    5  );            `\n\n./database.types.ts\n\n``   1  export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]    2      3  export interface Database {    4  public: {    5  Tables: {    6  movies: {    7  Row: { // the data expected from .select()    8  id: number    9  name: string    10  data: Json | null    11  }    12  Insert: { // the data to be passed to .insert()    13  id?: never // generated columns must not be supplied    14  name: string // `not null` columns with no default must be supplied    15  data?: Json | null // nullable columns can be omitted    16  }    17  Update: { // the data to be passed to .update()    18  id?: never    19  name?: string // `not null` columns are optional on .update()    20  data?: Json | null    21  }    22  }    23  }    24  }    25  }            ``\n\n## Using TypeScript type definitions[#](#using-typescript-type-definitions)\n\nYou can supply the type definitions to `supabase-js` like so:\n\n./index.tsx\n\n`   1  import { createClient } from '@supabase/supabase-js'    2  import { Database } from './database.types'    3      4  const supabase = createClient<Database>(    5  process.env.SUPABASE_URL,    6  process.env.SUPABASE_ANON_KEY    7  )            `\n\n## Helper types for Tables and Joins[#](#helper-types-for-tables-and-joins)\n\nYou can use the following helper types to make the generated TypeScript types easier to use.\n\nSometimes the generated types are not what you expect. For example, a view's column may show up as nullable when you expect it to be `not null`. Using [type-fest](https://github.com/sindresorhus/type-fest), you can override the types like so:\n\n./database-generated.types.ts\n\n`   1  export type Json = // ...    2      3  export interface Database {    4  // ...    5  }            `\n\n./database.types.ts\n\n``   1  import { MergeDeep } from 'type-fest'    2  import { Database as DatabaseGenerated } from './database-generated.types'    3  export { Json } from './database-generated.types'    4      5  // Override the type for a specific column in a view:    6  export type Database = MergeDeep<    7  DatabaseGenerated,    8  {    9  public: {    10  Views: {    11  movies_view: {    12  Row: {    13  // id is a primary key in public.movies, so it must be `not null`    14  id: number    15  }    16  }    17  }    18  }    19  }    20  >            ``\n\nYou can also override the type of an individual successful response if needed:\n\n`   1  const { data } = await supabase.from('countries').select().returns<MyType>()            `\n\nThe generated types provide shorthands for accessing tables and enums.\n\n./index.ts\n\n`   1  import { Database, Tables, Enums } from \"./database.types.ts\";    2      3  // Before 😕    4  let movie: Database['public']['Tables']['movies']['Row'] = // ...    5      6  // After 😍    7  let movie: Tables<'movies'>            `\n\n### Response types for complex queries[#](#response-types-for-complex-queries)\n\n`supabase-js` always returns a `data` object (for success), and an `error` object (for unsuccessful requests).\n\nThese helper types provide the result types from any query, including nested types for database joins.\n\nGiven the following schema with a relation between cities and countries, we can get the nested `CountriesWithCities` type:\n\n`   1  create table countries (    2  \"id\" serial primary key,    3  \"name\" text    4  );    5      6  create table cities (    7  \"id\" serial primary key,    8  \"name\" text,    9  \"country_id\" int references \"countries\"    10  );            `\n\n``   1  import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'    2      3  const countriesWithCitiesQuery = supabase    4  .from(\"countries\")    5  .select(`    6  id,    7  name,    8  cities (    9  id,    10  name    11  )    12  `);    13  type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;    14      15  const { data, error } = await countriesWithCitiesQuery;    16  if (error) throw error;    17  const countriesWithCities: CountriesWithCities = data;            ``\n\n* * *\n\n## Fetch data\n\nPerform a SELECT query on the table or view.\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n*   `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n\n### Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count rows in the table or view.\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    *   headOptionalboolean\n        \n        When set to `true`, `data` will not be returned. Useful if you only need the count.\n        \n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesQuery nested foreign tables through a join tableFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Afghanistan\"    6  },    7  {    8  \"id\": 2,    9  \"name\": \"Albania\"    10  },    11  {    12  \"id\": 3,    13  \"name\": \"Algeria\"    14  }    15  ],    16  \"status\": 200,    17  \"statusText\": \"OK\"    18  }            `\n\n* * *\n\n## Insert data\n\nPerform an INSERT into the table or view.\n\n### Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to insert. Pass an object to insert a single row or an array to insert multiple rows.\n    \n    Details\n    \n    *   union option 1Row\n        \n    *   union option 2Array<Row>\n        \n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count inserted rows.\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    *   defaultToNullOptionalboolean\n        \n        Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n        \n    \n\nCreate a recordCreate a record and return itBulk create\n\n`   1  const { error } = await supabase    2  .from('countries')    3  .insert({ id: 1, name: 'Denmark' })            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);            `\n\nResponse\n\n`   1  {    2  \"status\": 201,    3  \"statusText\": \"Created\"    4  }            `\n\n* * *\n\n## Update data\n\nPerform an UPDATE on the table or view.\n\n*   `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to update.\n\n### Parameters\n\n*   valuesRequiredRow\n    \n    The values to update with\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count updated rows.\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    \n\nUpdating your dataUpdate a record and return itUpdating JSON data\n\n`   1  const { error } = await supabase    2  .from('countries')    3  .update({ name: 'Australia' })    4  .eq('id', 1)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Taiwan');            `\n\nResponse\n\n`   1  {    2  \"status\": 204,    3  \"statusText\": \"No Content\"    4  }            `\n\n* * *\n\n## Upsert data\n\nPerform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n\n*   Primary keys must be included in `values` to use upsert.\n\n### Parameters\n\n*   valuesRequiredUnion: expand to see options\n    \n    The values to upsert with. Pass an object to upsert a single row or an array to upsert multiple rows.\n    \n    Details\n    \n    *   union option 1Row\n        \n    *   union option 2Array<Row>\n        \n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count upserted rows.\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    *   ignoreDuplicatesOptionalboolean\n        \n        If `true`, duplicate rows are ignored. If `false`, duplicate rows are merged with existing rows.\n        \n    *   onConflictOptionalstring\n        \n        Comma-separated UNIQUE column(s) to specify how duplicate rows are determined. Two rows are duplicates if all the `onConflict` columns are equal.\n        \n    *   defaultToNullOptionalboolean\n        \n        Make missing fields default to `null`. Otherwise, use the default value for the column. This only applies when inserting new rows, not when merging with existing rows under `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n        \n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .upsert({ id: 1, name: 'Albania' })    4  .select()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Albania\"    6  }    7  ],    8  \"status\": 201,    9  \"statusText\": \"Created\"    10  }            `\n\n* * *\n\n## Delete data\n\nPerform a DELETE on the table or view.\n\n*   `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n\n### Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count deleted rows.\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    \n\nDelete a single recordDelete a record and return itDelete multiple records\n\n`   1  const response = await supabase    2  .from('countries')    3  .delete()    4  .eq('id', 1)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Spain');            `\n\nResponse\n\n`   1  {    2  \"status\": 204,    3  \"statusText\": \"No Content\"    4  }            `\n\n* * *\n\n## Call a Postgres function\n\nPerform a function call.\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes—like for password resets and updates.\n\n`   1  create or replace function hello_world() returns text as $$    2  select 'Hello world';    3  $$ language sql;            `\n\nTo call Postgres functions on [Read Replicas](/docs/guides/platform/read-replicas), use the `get: true` option.\n\n### Parameters\n\n*   fnRequiredFnName\n    \n    The function name to call\n    \n*   argsRequiredFn\\['Args'\\]\n    \n    The arguments to pass to the function call\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   countOptionalUnion: expand to see options\n        \n        Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html).\n        \n        `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood.\n        \n        `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood.\n        \n        `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n        \n        Details\n        \n    *   getOptionalboolean\n        \n        When set to `true`, the function will be called with read-only access mode.\n        \n    *   headOptionalboolean\n        \n        When set to `true`, `data` will not be returned. Useful if you only need the count.\n        \n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`   1  const { data, error } = await supabase.rpc('hello_world')            `\n\nData source\n\n`   1  create function hello_world() returns text as $$    2  select 'Hello world';    3  $$ language sql;            `\n\nResponse\n\n`   1  {    2  \"data\": \"Hello world\",    3  \"status\": 200,    4  \"statusText\": \"OK\"    5  }            `\n\n* * *\n\n## Using filters\n\nFilters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nApplying FiltersChainingConditional ChainingFilter by values within a JSON columnFilter referenced tables\n\n`   1  const { data, error } = await supabase    2  .from('cities')    3  .select('name, country_id')    4  .eq('name', 'The Shire') // Correct    5      6  const { data, error } = await supabase    7  .from('cities')    8  .eq('name', 'The Shire') // Incorrect    9  .select('name, country_id')            `\n\nNotes\n\nFilters must be applied after any of `select()`, `update()`, `upsert()`, `delete()`, and `rpc()` and before [modifiers](/docs/reference/javascript/using-modifiers).\n\n* * *\n\n## Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredNonNullable\n    \n    The value to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .eq('name', 'Albania')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"Albania\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .neq('name', 'Albania')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Afghanistan\"    6  },    7  {    8  \"id\": 3,    9  \"name\": \"Algeria\"    10  }    11  ],    12  \"status\": 200,    13  \"statusText\": \"OK\"    14  }            `\n\n* * *\n\n## Column is greater than a value\n\nMatch only rows where `column` is greater than `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .gt('id', 2)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 3,    5  \"name\": \"Algeria\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\nNotes\n\nWhen using [reserved words](https://www.postgresql.org/docs/current/sql-keywords-appendix.html) for column names you need to add double quotes e.g. `.gt('\"order\"', 2)`\n\n* * *\n\n## Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .gte('id', 2)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"Albania\"    6  },    7  {    8  \"id\": 3,    9  \"name\": \"Algeria\"    10  }    11  ],    12  \"status\": 200,    13  \"statusText\": \"OK\"    14  }            `\n\n* * *\n\n## Column is less than a value\n\nMatch only rows where `column` is less than `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .lt('id', 2)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Afghanistan\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .lte('id', 2)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Afghanistan\"    6  },    7  {    8  \"id\": 2,    9  \"name\": \"Albania\"    10  }    11  ],    12  \"status\": 200,    13  \"statusText\": \"OK\"    14  }            `\n\n* * *\n\n## Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .like('name', '%Alba%')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"Albania\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   patternRequiredstring\n    \n    The pattern to match with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .ilike('name', '%alba%')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"Albania\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Column is a value\n\nMatch only rows where `column` IS `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with\n    \n    Details\n    \n    *   union option 1null\n        \n    *   union option 2boolean\n        \n    \n\nChecking for nullness, true or false\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .is('name', null)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'null'),    8  (2, null);            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"null\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\nNotes\n\nUsing the `eq()` filter doesn't work when filtering for `null`.\n\nInstead, you need to use `is()`.\n\n* * *\n\n## Column is in an array\n\nMatch only rows where `column` is included in the `values` array.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valuesRequiredArray<Row\\['ColumnName'\\]>\n    \n    The values array to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .in('name', ['Albania', 'Algeria'])            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"name\": \"Albania\"    6  },    7  {    8  \"id\": 3,    9  \"name\": \"Algeria\"    10  }    11  ],    12  \"status\": 200,    13  \"statusText\": \"OK\"    14  }            `\n\n* * *\n\n## Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n    *   union option 1string\n        \n    *   union option 2Record<string, unknown>\n        \n    *   union option 3Array<Row\\['ColumnName'\\]>\n        \n    *   union option 4Array<unknown>\n        \n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   1  const { data, error } = await supabase    2  .from('issues')    3  .select()    4  .contains('tags', ['is:open', 'priority:low'])            `\n\nData source\n\n`   1  create table    2  issues (    3  id int8 primary key,    4  title text,    5  tags text[]    6  );    7      8  insert into    9  issues (id, title, tags)    10  values    11  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),    12  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"title\": \"Cache invalidation is not working\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The jsonb, array, or range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The jsonb, array, or range value to filter with\n    \n    Details\n    \n    *   union option 1string\n        \n    *   union option 2Record<string, unknown>\n        \n    *   union option 3Array<Row\\['ColumnName'\\]>\n        \n    *   union option 4Array<unknown>\n        \n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`   1  const { data, error } = await supabase    2  .from('classes')    3  .select('name')    4  .containedBy('days', ['monday', 'tuesday', 'wednesday', 'friday'])            `\n\nData source\n\n`   1  create table    2  classes (    3  id int8 primary key,    4  name text,    5  days text[]    6  );    7      8  insert into    9  classes (id, name, days)    10  values    11  (1, 'Chemistry', array['monday', 'friday']),    12  (2, 'History', array['monday', 'wednesday', 'thursday']);            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"Chemistry\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('reservations')    3  .select()    4  .rangeGt('during', '[2000-01-02 08:00, 2000-01-02 09:00)')            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"room_name\": \"Topaz\",    6  \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"    7  }    8  ],    9  \"status\": 200,    10  \"statusText\": \"OK\"    11  }            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('reservations')    3  .select()    4  .rangeGte('during', '[2000-01-02 08:30, 2000-01-02 09:30)')            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 2,    5  \"room_name\": \"Topaz\",    6  \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"    7  }    8  ],    9  \"status\": 200,    10  \"statusText\": \"OK\"    11  }            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('reservations')    3  .select()    4  .rangeLt('during', '[2000-01-01 15:00, 2000-01-01 16:00)')            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"room_name\": \"Emerald\",    6  \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"    7  }    8  ],    9  \"status\": 200,    10  \"statusText\": \"OK\"    11  }            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or less than any element in `range`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('reservations')    3  .select()    4  .rangeLte('during', '[2000-01-01 14:00, 2000-01-01 16:00)')            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"room_name\": \"Emerald\",    6  \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"    7  }    8  ],    9  \"status\": 200,    10  \"statusText\": \"OK\"    11  }            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('reservations')    3  .select()    4  .rangeAdjacent('during', '[2000-01-01 12:00, 2000-01-01 13:00)')            `\n\nData source\n\n`   1  create table    2  reservations (    3  id int8 primary key,    4  room_name text,    5  during tsrange    6  );    7      8  insert into    9  reservations (id, room_name, during)    10  values    11  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),    12  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"room_name\": \"Emerald\",    6  \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"    7  }    8  ],    9  \"status\": 200,    10  \"statusText\": \"OK\"    11  }            `\n\nNotes\n\nPostgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n\n* * *\n\n## With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The array or range column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The array or range value to filter with\n    \n    Details\n    \n    *   union option 1string\n        \n    *   union option 2Array<Row\\['ColumnName'\\]>\n        \n    *   union option 3Array<unknown>\n        \n    \n\nOn array columnsOn range columns\n\n`   1  const { data, error } = await supabase    2  .from('issues')    3  .select('title')    4  .overlaps('tags', ['is:closed', 'severity:high'])            `\n\nData source\n\n`   1  create table    2  issues (    3  id int8 primary key,    4  title text,    5  tags text[]    6  );    7      8  insert into    9  issues (id, title, tags)    10  values    11  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),    12  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"title\": \"Cache invalidation is not working\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The text or tsvector column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   queryRequiredstring\n    \n    The query text to match with\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n    *   configOptionalstring\n        \n        The text search configuration to use\n        \n    *   typeOptionalUnion: expand to see options\n        \n        Change how the `query` text is interpreted\n        \n        Details\n        \n    \n\nText searchBasic normalizationFull normalizationWebsearch\n\n``   1  const result = await supabase    2  .from(\"texts\")    3  .select(\"content\")    4  .textSearch(\"content\", `'eggs' & 'ham'`, {    5  config: \"english\",    6  });            ``\n\nData source\n\n`   1  create table texts (    2  id bigint    3  primary key    4  generated always as identity,    5  content text    6  );    7      8  insert into texts (content) values    9  ('Four score and seven years ago'),    10  ('The road goes ever on and on'),    11  ('Green eggs and ham')    12  ;            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"content\": \"Green eggs and ham\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n### Parameters\n\n*   queryRequiredUnion: expand to see options\n    \n    The object to filter with, with column names as keys mapped to their filter values\n    \n    Details\n    \n    *   union option 1Record<ColumnName, Row\\['ColumnName'\\]>\n        \n    *   union option 2Record<string, unknown>\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('name')    4  .match({ id: 2, name: 'Albania' })            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"Albania\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Don't match the filter\n\nMatch only rows which doesn't satisfy the filter.\n\nnot() expects you to use the raw PostgREST syntax for the filter values.\n\n``   1  .not('id', 'in', '(5,6,7)') // Use `()` for `in` filter    2  .not('arraycol', 'cs', '{\"a\",\"b\"}') // Use `cs` for `contains()`, `{}` for array values            ``\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   operatorRequiredUnion: expand to see options\n    \n    The operator to be negated to filter with, following PostgREST syntax\n    \n    Details\n    \n    *   union option 1FilterOperator\n        \n    *   union option 2string\n        \n    \n*   valueRequiredUnion: expand to see options\n    \n    The value to filter with, following PostgREST syntax\n    \n    Details\n    \n    *   union option 1Row\\['ColumnName'\\]\n        \n    *   union option 2unknown\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .not('name', 'is', null)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'null'),    8  (2, null);            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"null\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Match at least one filter\n\nMatch only rows which satisfy at least one of the filters.\n\nor() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``   1  .or('id.in.(5,6,7), arraycol.cs.{\"a\",\"b\"}') // Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.    2  .or('id.in.(5,6,7), arraycol.cd.{\"a\",\"b\"}') // Use `cd` for `containedBy()`            ``\n\n### Parameters\n\n*   filtersRequiredstring\n    \n    The filters to use, following PostgREST syntax\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   foreignTableOptionalstring\n        \n        Deprecated, use `referencedTable` instead\n        \n    *   referencedTableOptionalstring\n        \n        Set this to filter on referenced tables instead of the parent table\n        \n    \n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('name')    4  .or('id.eq.2,name.eq.Algeria')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"Albania\"    5  },    6  {    7  \"name\": \"Algeria\"    8  }    9  ],    10  \"status\": 200,    11  \"statusText\": \"OK\"    12  }            `\n\n* * *\n\n## Match the filter\n\nMatch only rows which satisfy the filter. This is an escape hatch - you should use the specific filter methods wherever possible.\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``   1  .filter('id', 'in', '(5,6,7)') // Use `()` for `in` filter    2  .filter('arraycol', 'cs', '{\"a\",\"b\"}') // Use `cs` for `contains()`, `{}` for array values            ``\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to filter on\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   operatorRequiredUnion: expand to see options\n    \n    The operator to filter with, following PostgREST syntax\n    \n    Details\n    \n    *   union option 1FilterOperator\n        \n    *   union option 2\"not.eq\"\n        \n    *   union option 3\"not.neq\"\n        \n    *   union option 4\"not.gt\"\n        \n    *   union option 5\"not.gte\"\n        \n    *   union option 6\"not.lt\"\n        \n    *   union option 7\"not.lte\"\n        \n    *   union option 8\"not.like\"\n        \n    *   union option 9\"not.ilike\"\n        \n    *   union option 10\"not.is\"\n        \n    *   union option 11\"not.in\"\n        \n    *   union option 12\"not.cs\"\n        \n    *   union option 13\"not.cd\"\n        \n    *   union option 14\"not.sl\"\n        \n    *   union option 15\"not.sr\"\n        \n    *   union option 16\"not.nxl\"\n        \n    *   union option 17\"not.nxr\"\n        \n    *   union option 18\"not.adj\"\n        \n    *   union option 19\"not.ov\"\n        \n    *   union option 20\"not.fts\"\n        \n    *   union option 21\"not.plfts\"\n        \n    *   union option 22\"not.phfts\"\n        \n    *   union option 23\"not.wfts\"\n        \n    *   union option 24string\n        \n    \n*   valueRequiredunknown\n    \n    The value to filter with, following PostgREST syntax\n    \n\nWith \\`select()\\`On a referenced table\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .filter('name', 'in', '(\"Algeria\",\"Japan\")')            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 3,    5  \"name\": \"Algeria\"    6  }    7  ],    8  \"status\": 200,    9  \"statusText\": \"OK\"    10  }            `\n\n* * *\n\n## Using modifiers\n\nFilters work on the row level—they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition—allowing you to change the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response).\n\n* * *\n\n## Return data after inserting\n\nPerform a SELECT on the query result.\n\n### Parameters\n\n*   columnsOptionalQuery\n    \n    The columns to retrieve, separated by commas\n    \n\nWith \\`upsert()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .upsert({ id: 1, name: 'Algeria' })    4  .select()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 1,    5  \"name\": \"Algeria\"    6  }    7  ],    8  \"status\": 201,    9  \"statusText\": \"Created\"    10  }            `\n\n* * *\n\n## Order the results\n\nOrder the query result by `column`.\n\n### Parameters\n\n*   columnRequiredUnion: expand to see options\n    \n    The column to order by\n    \n    Details\n    \n    *   union option 1ColumnName\n        \n    *   union option 2string\n        \n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n    *   ascendingOptionalboolean\n        \n        If `true`, the result will be in ascending order\n        \n    *   nullsFirstOptionalboolean\n        \n        If `true`, `null`s appear first. If `false`, `null`s appear last.\n        \n    *   referencedTableOptionalundefined\n        \n        Set this to order a referenced table by its columns\n        \n    *   foreignTableOptionalundefined\n        \n    \n\nWith \\`select()\\`On a referenced table\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('id', 'name')    4  .order('id', { ascending: false })            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": 3,    5  \"name\": \"Algeria\"    6  },    7  {    8  \"id\": 2,    9  \"name\": \"Albania\"    10  },    11  {    12  \"id\": 1,    13  \"name\": \"Afghanistan\"    14  }    15  ],    16  \"status\": 200,    17  \"statusText\": \"OK\"    18  }            `\n\n* * *\n\n## Limit the number of rows returned\n\nLimit the query result by `count`.\n\n### Parameters\n\n*   countRequirednumber\n    \n    The maximum number of rows to return\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   foreignTableOptionalstring\n        \n        Deprecated, use `options.referencedTable` instead\n        \n    *   referencedTableOptionalstring\n        \n        Set this to limit rows of referenced tables instead of the parent table\n        \n    \n\nWith \\`select()\\`On a referenced table\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('name')    4  .limit(1)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"Afghanistan\"    5  }    6  ],    7  \"status\": 200,    8  \"statusText\": \"OK\"    9  }            `\n\n* * *\n\n## Limit the query to a range\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly. The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n\n### Parameters\n\n*   fromRequirednumber\n    \n    The starting index from which to limit the result\n    \n*   toRequirednumber\n    \n    The last index to which to limit the result\n    \n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   foreignTableOptionalstring\n        \n        Deprecated, use `options.referencedTable` instead\n        \n    *   referencedTableOptionalstring\n        \n        Set this to limit rows of referenced tables instead of the parent table\n        \n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('name')    4  .range(0, 1)            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"Afghanistan\"    5  },    6  {    7  \"name\": \"Albania\"    8  }    9  ],    10  \"status\": 200,    11  \"statusText\": \"OK\"    12  }            `\n\n* * *\n\n## Set an abort signal\n\nSet the AbortSignal for the fetch request.\n\nYou can use this to set a timeout for the request.\n\n### Parameters\n\n*   signalRequiredAbortSignal\n    \n    The AbortSignal to use for the fetch request\n    \n\nAborting requests in-flightSet a timeout\n\n`   1  const ac = new AbortController()    2  ac.abort()    3  const { data, error } = await supabase    4  .from('very_big_table')    5  .select()    6  .abortSignal(ac.signal)            `\n\nResponse\n\n`   1  {    2  \"error\": {    3  \"message\": \"FetchError: The user aborted a request.\",    4  \"details\": \"\",    5  \"hint\": \"\",    6  \"code\": \"\"    7  },    8  \"status\": 400,    9  \"statusText\": \"Bad Request\"    10  }            `\n\nNotes\n\nYou can use an [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) to abort requests. Note that `status` and `statusText` don't mean anything for aborted requests as the request wasn't fulfilled.\n\n* * *\n\n## Retrieve one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select('name')    4  .limit(1)    5  .single()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"name\": \"Afghanistan\"    4  },    5  \"status\": 200,    6  \"statusText\": \"OK\"    7  }            `\n\n* * *\n\n## Retrieve zero or one row of data\n\nReturn `data` as a single object instead of an array of objects.\n\n### Return Type\n\nUnion: expand to see options\n\nDetails\n\n*   union option 1null\n    \n*   union option 2ResultOne\n    \n\nWith \\`select()\\`\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .eq('name', 'Singapore')    5  .maybeSingle()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"status\": 200,    3  \"statusText\": \"OK\"    4  }            `\n\n* * *\n\n## Retrieve as a CSV\n\nReturn `data` as a string in CSV format.\n\n### Return Type\n\nstring\n\nReturn data as CSV\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .csv()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  {    2  \"data\": \"id,name\\n1,Afghanistan\\n2,Albania\\n3,Algeria\",    3  \"status\": 200,    4  \"statusText\": \"OK\"    5  }            `\n\nNotes\n\nBy default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n\n* * *\n\n## Override type of successful response\n\nOverride the type of the returned `data`.\n\nOverride type of successful response\n\n`   1  const { data } = await supabase    2  .from('countries')    3  .select()    4  .returns<MyType>()            `\n\nResponse\n\n`   1  let x: typeof data // MyType | null            `\n\n* * *\n\n## Using explain\n\nReturn `data` as the EXPLAIN plan for the query.\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n### Parameters\n\n*   optionsRequiredobject\n    \n    Named parameters\n    \n    Details\n    \n    *   analyzeOptionalboolean\n        \n        If `true`, the query will be executed and the actual run time will be returned\n        \n    *   buffersOptionalboolean\n        \n        If `true`, include information on buffer usage\n        \n    *   formatOptionalUnion: expand to see options\n        \n        The format of the output, can be `\"text\"` (default) or `\"json\"`\n        \n        Details\n        \n    *   settingsOptionalboolean\n        \n        If `true`, include information on configuration parameters that affect query planning\n        \n    *   verboseOptionalboolean\n        \n        If `true`, the query identifier will be returned and `data` will include the output columns of the query\n        \n    *   walOptionalboolean\n        \n        If `true`, include information on WAL record generation\n        \n    \n\n### Return Type\n\nUnion: expand to see options\n\nDetails\n\n*   union option 1string\n    \n*   union option 2Array<Record<string, unknown>>\n    \n\nGet the execution planGet the execution plan with analyze and verbose\n\n`   1  const { data, error } = await supabase    2  .from('countries')    3  .select()    4  .explain()            `\n\nData source\n\n`   1  create table    2  countries (id int8 primary key, name text);    3      4  insert into    5  countries (id, name)    6  values    7  (1, 'Afghanistan'),    8  (2, 'Albania'),    9  (3, 'Algeria');            `\n\nResponse\n\n`   1  Aggregate (cost=33.34..33.36 rows=1 width=112)    2  -> Limit (cost=0.00..18.33 rows=1000 width=40)    3  -> Seq Scan on countries (cost=0.00..22.00 rows=1200 width=40)            `\n\nNotes\n\nBy default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n\n* * *\n\n## Overview\n\n*   The auth methods can be accessed via the `supabase.auth` namespace.\n    \n*   By default, the supabase client sets `persistSession` to true and attempts to store the session in local storage. When using the supabase client in an environment that doesn't support local storage, you might notice the following warning message being logged:\n    \n    > No storage option exists to persist the session, which may result in unexpected behavior when using auth. If you want to set `persistSession` to true, please provide a storage option or you may set `persistSession` to false to disable this warning.\n    \n    This warning message can be safely ignored if you're not using auth on the server-side. If you are using auth and you want to set `persistSession` to true, you will need to provide a custom storage implementation that follows [this interface](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L1027).\n    \n*   Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n    \n*   The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n    \n\nCreate auth clientCreate auth client (server-side)\n\n`   1  import { createClient } from '@supabase/supabase-js'    2      3  const supabase = createClient(supabase_url, anon_key)            `\n\n* * *\n\n## Create a new user\n\nCreates a new user.\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers).\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration).\n*   If signUp() is called for an existing confirmed user:\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser).\n\n### Parameters\n\n*   credentialsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`   1  const { data, error } = await supabase.auth.signUp({    2  email: 'example@email.com',    3  password: 'example-password',    4  })            `\n\nResponse\n\n`   1  // Some fields may be null if \"confirm email\" is enabled.    2  {    3  \"data\": {    4  \"user\": {    5  \"id\": \"11111111-1111-1111-1111-111111111111\",    6  \"aud\": \"authenticated\",    7  \"role\": \"authenticated\",    8  \"email\": \"example@email.com\",    9  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    10  \"phone\": \"\",    11  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    12  \"app_metadata\": {    13  \"provider\": \"email\",    14  \"providers\": [    15  \"email\"    16  ]    17  },    18  \"user_metadata\": {},    19  \"identities\": [    20  {    21  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    22  \"id\": \"11111111-1111-1111-1111-111111111111\",    23  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    24  \"identity_data\": {    25  \"email\": \"example@email.com\",    26  \"email_verified\": false,    27  \"phone_verified\": false,    28  \"sub\": \"11111111-1111-1111-1111-111111111111\"    29  },    30  \"provider\": \"email\",    31  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    32  \"created_at\": \"2024-01-01T00:00:00Z\",    33  \"updated_at\": \"2024-01-01T00:00:00Z\",    34  \"email\": \"example@email.com\"    35  }    36  ],    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\"    39  },    40  \"session\": {    41  \"access_token\": \"<ACCESS_TOKEN>\",    42  \"token_type\": \"bearer\",    43  \"expires_in\": 3600,    44  \"expires_at\": 1700000000,    45  \"refresh_token\": \"<REFRESH_TOKEN>\",    46  \"user\": {    47  \"id\": \"11111111-1111-1111-1111-111111111111\",    48  \"aud\": \"authenticated\",    49  \"role\": \"authenticated\",    50  \"email\": \"example@email.com\",    51  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    52  \"phone\": \"\",    53  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    54  \"app_metadata\": {    55  \"provider\": \"email\",    56  \"providers\": [    57  \"email\"    58  ]    59  },    60  \"user_metadata\": {},    61  \"identities\": [    62  {    63  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    64  \"id\": \"11111111-1111-1111-1111-111111111111\",    65  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    66  \"identity_data\": {    67  \"email\": \"example@email.com\",    68  \"email_verified\": false,    69  \"phone_verified\": false,    70  \"sub\": \"11111111-1111-1111-1111-111111111111\"    71  },    72  \"provider\": \"email\",    73  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    74  \"created_at\": \"2024-01-01T00:00:00Z\",    75  \"updated_at\": \"2024-01-01T00:00:00Z\",    76  \"email\": \"example@email.com\"    77  }    78  ],    79  \"created_at\": \"2024-01-01T00:00:00Z\",    80  \"updated_at\": \"2024-01-01T00:00:00Z\"    81  }    82  }    83  },    84  \"error\": null    85  }            `\n\n* * *\n\n## Listen to auth events\n\nReceive a notification every time an auth event happens.\n\n*   Subscribes to important events occurring on the user's session.\n*   Use on the frontend/client. It is less useful on the server.\n*   Events are emitted across tabs to keep your application's UI up-to-date. Some events can fire very frequently, based on the number of tabs open. Use a quick and efficient callback function, and defer or debounce as many operations as you can to be performed outside of the callback.\n*   **Important:** A callback can be an `async` function and it runs synchronously during the processing of the changes causing the event. You can easily create a dead-lock by using `await` on a call to another method of the Supabase library.\n    *   Avoid using `async` functions as callbacks.\n    *   Limit the number of `await` calls in `async` callbacks.\n    *   Do not use other Supabase functions in the callback function. If you must, dispatch the functions once the callback has finished executing. Use this as a quick way to achieve this:\n        \n        `   1  supabase.auth.onAuthStateChange((event, session) => {    2  setTimeout(async () => {    3  // await on other Supabase function here    4  // this runs right after the callback has finished    5  }, 0)    6  })            `\n        \n*   Emitted events:\n    *   `INITIAL_SESSION`\n        *   Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\n    *   `SIGNED_IN`\n        *   Emitted each time a user session is confirmed or re-established, including on user sign in and when refocusing a tab.\n        *   Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\n        *   This event can fire very frequently depending on the number of tabs open in your application.\n    *   `SIGNED_OUT`\n        *   Emitted when the user signs out. This can be after:\n            *   A call to `supabase.auth.signOut()`.\n            *   After the user's session has expired for any reason:\n                *   User has signed out on another device.\n                *   The session has reached its timebox limit or inactivity timeout.\n                *   User has signed in on another device with single session per user enabled.\n                *   Check the [User Sessions](/docs/guides/auth/sessions) docs for more information.\n        *   Use this to clean up any local storage your application has associated with the user.\n    *   `TOKEN_REFRESHED`\n        *   Emitted each time a new access and refresh token are fetched for the signed in user.\n        *   It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\n            *   Avoid frequent calls to `supabase.auth.getSession()` for the same purpose.\n        *   There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\n        *   The frequency of this event is related to the JWT expiry limit configured on your project.\n    *   `USER_UPDATED`\n        *   Emitted each time the `supabase.auth.updateUser()` method finishes successfully. Listen to it to update your application's UI based on new profile information.\n    *   `PASSWORD_RECOVERY`\n        *   Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\n        *   Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password).\n\n### Parameters\n\n*   callbackRequiredfunction\n    \n    A callback function to be invoked when an auth event happens.\n    \n    Details\n    \n    *   Parameterscallback parameters\n        \n    *   ReturnUnion: expand to see options\n        \n        Details\n        \n    \n\n### Return Type\n\nobject\n\nDetails\n\n*   dataRequiredobject\n    \n    Details\n    \n\nListen to auth changesListen to sign outStore OAuth provider tokens on sign inUse React Context for the User's sessionListen to password recovery eventsListen to sign inListen to token refreshListen to user updates\n\n`   1  const { data } = supabase.auth.onAuthStateChange((event, session) => {    2  console.log(event, session)    3      4  if (event === 'INITIAL_SESSION') {    5  // handle initial session    6  } else if (event === 'SIGNED_IN') {    7  // handle sign in event    8  } else if (event === 'SIGNED_OUT') {    9  // handle sign out event    10  } else if (event === 'PASSWORD_RECOVERY') {    11  // handle password recovery event    12  } else if (event === 'TOKEN_REFRESHED') {    13  // handle token refreshed event    14  } else if (event === 'USER_UPDATED') {    15  // handle user updated event    16  }    17  })    18      19  // call unsubscribe to remove the callback    20  data.subscription.unsubscribe()            `\n\n* * *\n\n## Create an anonymous user\n\nCreates a new anonymous user.\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n\n### Parameters\n\n*   credentialsOptionalSignInAnonymouslyCredentials\n    \n    Details\n    \n    *   optionsOptionalobject\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`   1  const { data, error } = await supabase.auth.signInAnonymously({    2  options: {    3  captchaToken    4  }    5  });            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"\",    8  \"phone\": \"\",    9  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    10  \"app_metadata\": {},    11  \"user_metadata\": {},    12  \"identities\": [],    13  \"created_at\": \"2024-01-01T00:00:00Z\",    14  \"updated_at\": \"2024-01-01T00:00:00Z\",    15  \"is_anonymous\": true    16  },    17  \"session\": {    18  \"access_token\": \"<ACCESS_TOKEN>\",    19  \"token_type\": \"bearer\",    20  \"expires_in\": 3600,    21  \"expires_at\": 1700000000,    22  \"refresh_token\": \"<REFRESH_TOKEN>\",    23  \"user\": {    24  \"id\": \"11111111-1111-1111-1111-111111111111\",    25  \"aud\": \"authenticated\",    26  \"role\": \"authenticated\",    27  \"email\": \"\",    28  \"phone\": \"\",    29  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    30  \"app_metadata\": {},    31  \"user_metadata\": {},    32  \"identities\": [],    33  \"created_at\": \"2024-01-01T00:00:00Z\",    34  \"updated_at\": \"2024-01-01T00:00:00Z\",    35  \"is_anonymous\": true    36  }    37  }    38  },    39  \"error\": null    40  }            `\n\n* * *\n\n## Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.\n\n### Parameters\n\n*   credentialsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign in with email and passwordSign in with phone and password\n\n`   1  const { data, error } = await supabase.auth.signInWithPassword({    2  email: 'example@email.com',    3  password: 'example-password',    4  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    11  \"app_metadata\": {    12  \"provider\": \"email\",    13  \"providers\": [    14  \"email\"    15  ]    16  },    17  \"user_metadata\": {},    18  \"identities\": [    19  {    20  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    21  \"id\": \"11111111-1111-1111-1111-111111111111\",    22  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    23  \"identity_data\": {    24  \"email\": \"example@email.com\",    25  \"email_verified\": false,    26  \"phone_verified\": false,    27  \"sub\": \"11111111-1111-1111-1111-111111111111\"    28  },    29  \"provider\": \"email\",    30  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    31  \"created_at\": \"2024-01-01T00:00:00Z\",    32  \"updated_at\": \"2024-01-01T00:00:00Z\",    33  \"email\": \"example@email.com\"    34  }    35  ],    36  \"created_at\": \"2024-01-01T00:00:00Z\",    37  \"updated_at\": \"2024-01-01T00:00:00Z\"    38  },    39  \"session\": {    40  \"access_token\": \"<ACCESS_TOKEN>\",    41  \"token_type\": \"bearer\",    42  \"expires_in\": 3600,    43  \"expires_at\": 1700000000,    44  \"refresh_token\": \"<REFRESH_TOKEN>\",    45  \"user\": {    46  \"id\": \"11111111-1111-1111-1111-111111111111\",    47  \"aud\": \"authenticated\",    48  \"role\": \"authenticated\",    49  \"email\": \"example@email.com\",    50  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    51  \"phone\": \"\",    52  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    53  \"app_metadata\": {    54  \"provider\": \"email\",    55  \"providers\": [    56  \"email\"    57  ]    58  },    59  \"user_metadata\": {},    60  \"identities\": [    61  {    62  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    63  \"id\": \"11111111-1111-1111-1111-111111111111\",    64  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    65  \"identity_data\": {    66  \"email\": \"example@email.com\",    67  \"email_verified\": false,    68  \"phone_verified\": false,    69  \"sub\": \"11111111-1111-1111-1111-111111111111\"    70  },    71  \"provider\": \"email\",    72  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    73  \"created_at\": \"2024-01-01T00:00:00Z\",    74  \"updated_at\": \"2024-01-01T00:00:00Z\",    75  \"email\": \"example@email.com\"    76  }    77  ],    78  \"created_at\": \"2024-01-01T00:00:00Z\",    79  \"updated_at\": \"2024-01-01T00:00:00Z\"    80  }    81  }    82  },    83  \"error\": null    84  }            `\n\n* * *\n\n## Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n\n### Parameters\n\n*   credentialsRequiredSignInWithIdTokenCredentials\n    \n    Details\n    \n    *   providerRequiredUnion: expand to see options\n        \n        Provider name or OIDC `iss` value identifying which provider should be used to verify the provided token. Supported names: `google`, `apple`, `azure`, `facebook`, `keycloak` (deprecated).\n        \n        Details\n        \n    *   tokenRequiredstring\n        \n        OIDC ID token issued by the specified provider. The `iss` claim in the ID token must match the supplied provider. Some ID tokens contain an `at_hash` which require that you provide an `access_token` value to be accepted properly. If the token contains a `nonce` claim you must supply the nonce used to obtain the ID token.\n        \n    *   access\\_tokenOptionalstring\n        \n        If the ID token contains an `at_hash` claim, then the hash of this value is compared to the value in the ID token.\n        \n    *   nonceOptionalstring\n        \n        If the ID token contains a `nonce` claim, then the hash of this value is compared to the value in the ID token.\n        \n    *   optionsOptionalobject\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign In using ID Token\n\n`   1  const { data, error } = await supabase.auth.signInWithIdToken({    2  provider: 'google',    3  token: 'your-id-token'    4  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    8  \"app_metadata\": {    9  ...    10  },    11  \"user_metadata\": {    12  ...    13  },    14  \"identities\": [    15  {    16  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    17  \"provider\": \"google\",    18  }    19  ],    20  \"created_at\": \"2024-01-01T00:00:00Z\",    21  \"updated_at\": \"2024-01-01T00:00:00Z\",    22  },    23  \"session\": {    24  \"access_token\": \"<ACCESS_TOKEN>\",    25  \"token_type\": \"bearer\",    26  \"expires_in\": 3600,    27  \"expires_at\": 1700000000,    28  \"refresh_token\": \"<REFRESH_TOKEN>\",    29  \"user\": {    30  \"id\": \"11111111-1111-1111-1111-111111111111\",    31  \"aud\": \"authenticated\",    32  \"role\": \"authenticated\",    33  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    34  \"app_metadata\": {    35  ...    36  },    37  \"user_metadata\": {    38  ...    39  },    40  \"identities\": [    41  {    42  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    43  \"provider\": \"google\",    44  }    45  ],    46  \"created_at\": \"2024-01-01T00:00:00Z\",    47  \"updated_at\": \"2024-01-01T00:00:00Z\",    48  }    49  }    50  },    51  \"error\": null    52  }            `\n\n* * *\n\n## Sign in a user through OTP\n\nLog in a user using magiclink or a one-time password (OTP).\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `signInWithOtp()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n*   See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n*   See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login?showSmsProvider=Twilio) for details about configuring WhatsApp sign in.\n\n### Parameters\n\n*   credentialsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`   1  const { data, error } = await supabase.auth.signInWithOtp({    2  email: 'example@email.com',    3  options: {    4  emailRedirectTo: 'https://example.com/welcome'    5  }    6  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": null,    4  \"session\": null    5  },    6  \"error\": null    7  }            `\n\nNotes\n\nThe user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.\n\n* * *\n\n## Sign in a user through OAuth\n\nLog in an existing user via a third-party provider. This method supports the PKCE flow.\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n\n### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n    \n    Details\n    \n    *   providerRequiredUnion: expand to see options\n        \n        One of the providers supported by GoTrue.\n        \n        Details\n        \n    *   optionsOptionalobject\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes and access provider tokens\n\n`   1  const { data, error } = await supabase.auth.signInWithOAuth({    2  provider: 'github'    3  })            `\n\nResponse\n\n`   1  {    2  data: {    3  provider: 'github',    4  url: <PROVIDER_URL_TO_REDIRECT_TO>    5  },    6  error: null    7  }            `\n\n* * *\n\n## Sign in a user through SSO\n\nAttempts a single-sign on using an enterprise Identity Provider. A successful SSO attempt will redirect the current page to the identity provider authorization page. The redirect URL is implementation and SSO protocol specific.\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\n    *   Mapping specific user email addresses with an identity provider.\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n\n### Parameters\n\n*   paramsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSign in with email domainSign in with provider UUID\n\n`   1  // You can extract the user's email domain and use it to trigger the    2  // authentication flow with the correct identity provider.    3      4  const { data, error } = await supabase.auth.signInWithSSO({    5  domain: 'company.com'    6  })    7      8  if (data?.url) {    9  // redirect the user to the identity provider's authentication flow    10  window.location.href = data.url    11  }            `\n\n* * *\n\n## Sign out a user\n\nInside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n\n*   In order to use the `signOut()` method, the user needs to be signed in first.\n*   By default, `signOut()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n\n### Parameters\n\n*   optionsRequiredSignOut\n    \n    Details\n    \n    *   scopeOptionalUnion: expand to see options\n        \n        Determines which sessions should be logged out. Global means all sessions by this account. Local means only this session. Others means all other sessions except the current one. When using others, there is no sign-out event fired on the current session!\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<object>\n\nDetails\n\n*   errorUnion: expand to see options\n    \n    Details\n    \n\nSign out\n\n`   1  const { error } = await supabase.auth.signOut()            `\n\n* * *\n\n## Send a password reset request\n\nSends a password reset request to an email address. This method supports the PKCE flow.\n\n*   The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n*   The `resetPasswordForEmail()` only sends a password reset link to the user's email. To update the user's password, see [`updateUser()`](/docs/reference/javascript/auth-updateuser).\n*   A `SIGNED_IN` and `PASSWORD_RECOVERY` event will be emitted when the password recovery link is clicked. You can use [`onAuthStateChange()`](/docs/reference/javascript/auth-onauthstatechange) to listen and invoke a callback function on these events.\n*   When the user clicks the reset link in the email they are redirected back to your application. You can configure the URL that the user is redirected to with the `redirectTo` parameter. See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n*   After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\n\n`   1  const { data, error } = await supabase.auth.updateUser({    2  password: new_password    3  })            `\n\n### Parameters\n\n*   emailRequiredstring\n    \n    The email address of the user.\n    \n*   optionsRequiredobject\n    \n    Details\n    \n    *   captchaTokenOptionalstring\n        \n        Verification token received when the user completes the captcha on the site.\n        \n    *   redirectToOptionalstring\n        \n        The URL to send the user to after they click the password reset link.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nReset passwordReset password (React)\n\n`   1  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {    2  redirectTo: 'https://example.com/update-password',    3  })            `\n\nResponse\n\n`   1  {    2  data: {}    3  error: null    4  }            `\n\n* * *\n\n## Verify and log in through OTP\n\nLog in a user given a User supplied OTP or TokenHash received through mobile or email.\n\n*   The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n\n### Parameters\n\n*   paramsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1VerifyMobileOtpParams\n        \n        Details\n        \n    *   union option 2VerifyEmailOtpParams\n        \n        Details\n        \n    *   union option 3VerifyTokenHashParams\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nVerify Signup One-Time Password (OTP)Verify Sms One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`   1  const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'email'})            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"recovery_sent_at\": \"2024-01-01T00:00:00Z\",    12  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    13  \"app_metadata\": {    14  \"provider\": \"email\",    15  \"providers\": [    16  \"email\"    17  ]    18  },    19  \"user_metadata\": {    20  \"email\": \"example@email.com\",    21  \"email_verified\": false,    22  \"phone_verified\": false,    23  \"sub\": \"11111111-1111-1111-1111-111111111111\"    24  },    25  \"identities\": [    26  {    27  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    28  \"id\": \"11111111-1111-1111-1111-111111111111\",    29  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    30  \"identity_data\": {    31  \"email\": \"example@email.com\",    32  \"email_verified\": false,    33  \"phone_verified\": false,    34  \"sub\": \"11111111-1111-1111-1111-111111111111\"    35  },    36  \"provider\": \"email\",    37  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    38  \"created_at\": \"2024-01-01T00:00:00Z\",    39  \"updated_at\": \"2024-01-01T00:00:00Z\",    40  \"email\": \"example@email.com\"    41  }    42  ],    43  \"created_at\": \"2024-01-01T00:00:00Z\",    44  \"updated_at\": \"2024-01-01T00:00:00Z\",    45  \"is_anonymous\": false    46  },    47  \"session\": {    48  \"access_token\": \"<ACCESS_TOKEN>\",    49  \"token_type\": \"bearer\",    50  \"expires_in\": 3600,    51  \"expires_at\": 1700000000,    52  \"refresh_token\": \"<REFRESH_TOKEN>\",    53  \"user\": {    54  \"id\": \"11111111-1111-1111-1111-111111111111\",    55  \"aud\": \"authenticated\",    56  \"role\": \"authenticated\",    57  \"email\": \"example@email.com\",    58  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    59  \"phone\": \"\",    60  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    61  \"recovery_sent_at\": \"2024-01-01T00:00:00Z\",    62  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    63  \"app_metadata\": {    64  \"provider\": \"email\",    65  \"providers\": [    66  \"email\"    67  ]    68  },    69  \"user_metadata\": {    70  \"email\": \"example@email.com\",    71  \"email_verified\": false,    72  \"phone_verified\": false,    73  \"sub\": \"11111111-1111-1111-1111-111111111111\"    74  },    75  \"identities\": [    76  {    77  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    78  \"id\": \"11111111-1111-1111-1111-111111111111\",    79  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    80  \"identity_data\": {    81  \"email\": \"example@email.com\",    82  \"email_verified\": false,    83  \"phone_verified\": false,    84  \"sub\": \"11111111-1111-1111-1111-111111111111\"    85  },    86  \"provider\": \"email\",    87  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    88  \"created_at\": \"2024-01-01T00:00:00Z\",    89  \"updated_at\": \"2024-01-01T00:00:00Z\",    90  \"email\": \"example@email.com\"    91  }    92  ],    93  \"created_at\": \"2024-01-01T00:00:00Z\",    94  \"updated_at\": \"2024-01-01T00:00:00Z\",    95  \"is_anonymous\": false    96  }    97  }    98  },    99  \"error\": null    100  }            `\n\n* * *\n\n## Retrieve a session\n\nReturns the session, refreshing it if necessary.\n\n*   This method retrieves the current local session (i.e local storage).\n*   The session contains a signed JWT and unencoded session data.\n*   Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`getUser`](/docs/reference/javascript/auth-getuser) instead.\n*   If the session has an expired access token, this method will use the refresh token to get a new session.\n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n*   union option 3object\n    \n    Details\n    \n\nGet the session data\n\n`   1  const { data, error } = await supabase.auth.getSession()            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"session\": {    4  \"access_token\": \"<ACCESS_TOKEN>\",    5  \"token_type\": \"bearer\",    6  \"expires_in\": 3600,    7  \"expires_at\": 1700000000,    8  \"refresh_token\": \"<REFRESH_TOKEN>\",    9  \"user\": {    10  \"id\": \"11111111-1111-1111-1111-111111111111\",    11  \"aud\": \"authenticated\",    12  \"role\": \"authenticated\",    13  \"email\": \"example@email.com\",    14  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    15  \"phone\": \"\",    16  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    17  \"app_metadata\": {    18  \"provider\": \"email\",    19  \"providers\": [    20  \"email\"    21  ]    22  },    23  \"user_metadata\": {    24  \"email\": \"example@email.com\",    25  \"email_verified\": false,    26  \"phone_verified\": false,    27  \"sub\": \"11111111-1111-1111-1111-111111111111\"    28  },    29  \"identities\": [    30  {    31  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    32  \"id\": \"11111111-1111-1111-1111-111111111111\",    33  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    34  \"identity_data\": {    35  \"email\": \"example@email.com\",    36  \"email_verified\": false,    37  \"phone_verified\": false,    38  \"sub\": \"11111111-1111-1111-1111-111111111111\"    39  },    40  \"provider\": \"email\",    41  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    42  \"created_at\": \"2024-01-01T00:00:00Z\",    43  \"updated_at\": \"2024-01-01T00:00:00Z\",    44  \"email\": \"example@email.com\"    45  }    46  ],    47  \"created_at\": \"2024-01-01T00:00:00Z\",    48  \"updated_at\": \"2024-01-01T00:00:00Z\",    49  \"is_anonymous\": false    50  }    51  }    52  },    53  \"error\": null    54  }            `\n\n* * *\n\n## Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh and return a new session whether the current one is expired or not.\n\n### Parameters\n\n*   currentSessionOptionalobject\n    \n    The current session. If passed in, it must contain a refresh token.\n    \n    Details\n    \n    *   refresh\\_tokenRequiredstring\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nRefresh session using the current sessionRefresh session using a refresh token\n\n`   1  const { data, error } = await supabase.auth.refreshSession()    2  const { session, user } = data            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    12  \"app_metadata\": {    13  \"provider\": \"email\",    14  \"providers\": [    15  \"email\"    16  ]    17  },    18  \"user_metadata\": {    19  \"email\": \"example@email.com\",    20  \"email_verified\": false,    21  \"phone_verified\": false,    22  \"sub\": \"11111111-1111-1111-1111-111111111111\"    23  },    24  \"identities\": [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"example@email.com\",    31  \"email_verified\": false,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"example@email.com\"    40  }    41  ],    42  \"created_at\": \"2024-01-01T00:00:00Z\",    43  \"updated_at\": \"2024-01-01T00:00:00Z\",    44  \"is_anonymous\": false    45  },    46  \"session\": {    47  \"access_token\": \"<ACCESS_TOKEN>\",    48  \"token_type\": \"bearer\",    49  \"expires_in\": 3600,    50  \"expires_at\": 1700000000,    51  \"refresh_token\": \"<REFRESH_TOKEN>\",    52  \"user\": {    53  \"id\": \"11111111-1111-1111-1111-111111111111\",    54  \"aud\": \"authenticated\",    55  \"role\": \"authenticated\",    56  \"email\": \"example@email.com\",    57  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    58  \"phone\": \"\",    59  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    60  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    61  \"app_metadata\": {    62  \"provider\": \"email\",    63  \"providers\": [    64  \"email\"    65  ]    66  },    67  \"user_metadata\": {    68  \"email\": \"example@email.com\",    69  \"email_verified\": false,    70  \"phone_verified\": false,    71  \"sub\": \"11111111-1111-1111-1111-111111111111\"    72  },    73  \"identities\": [    74  {    75  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    76  \"id\": \"11111111-1111-1111-1111-111111111111\",    77  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    78  \"identity_data\": {    79  \"email\": \"example@email.com\",    80  \"email_verified\": false,    81  \"phone_verified\": false,    82  \"sub\": \"11111111-1111-1111-1111-111111111111\"    83  },    84  \"provider\": \"email\",    85  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    86  \"created_at\": \"2024-01-01T00:00:00Z\",    87  \"updated_at\": \"2024-01-01T00:00:00Z\",    88  \"email\": \"example@email.com\"    89  }    90  ],    91  \"created_at\": \"2024-01-01T00:00:00Z\",    92  \"updated_at\": \"2024-01-01T00:00:00Z\",    93  \"is_anonymous\": false    94  }    95  }    96  },    97  \"error\": null    98  }            `\n\n* * *\n\n## Retrieve a user\n\nGets the current user details if there is an existing session. This method performs a network request to the Supabase Auth server, so the returned value is authentic and can be used to base authorization rules on.\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n*   Should always be used when checking for user authorization on the server. On the client, you can instead use `getSession().session.user` for faster results. `getSession` is insecure on the server.\n\n### Parameters\n\n*   jwtOptionalstring\n    \n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`   1  const { data: { user } } = await supabase.auth.getUser()            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    12  \"app_metadata\": {    13  \"provider\": \"email\",    14  \"providers\": [    15  \"email\"    16  ]    17  },    18  \"user_metadata\": {    19  \"email\": \"example@email.com\",    20  \"email_verified\": false,    21  \"phone_verified\": false,    22  \"sub\": \"11111111-1111-1111-1111-111111111111\"    23  },    24  \"identities\": [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"example@email.com\",    31  \"email_verified\": false,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"example@email.com\"    40  }    41  ],    42  \"created_at\": \"2024-01-01T00:00:00Z\",    43  \"updated_at\": \"2024-01-01T00:00:00Z\",    44  \"is_anonymous\": false    45  }    46  },    47  \"error\": null    48  }            `\n\n* * *\n\n## Update a user\n\nUpdates user data for a logged in user.\n\n*   In order to use the `updateUser()` method, the user needs to be signed in first.\n*   By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n\n### Parameters\n\n*   attributesRequiredUserAttributes\n    \n    Details\n    \n    *   dataOptionalobject\n        \n        A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column.\n        \n    *   emailOptionalstring\n        \n        The user's email.\n        \n    *   nonceOptionalstring\n        \n        The nonce sent for reauthentication if the user's password is to be updated.\n        \n    *   passwordOptionalstring\n        \n        The user's password.\n        \n    *   phoneOptionalstring\n        \n        The user's phone.\n        \n    \n*   optionsRequiredobject\n    \n    Details\n    \n    *   emailRedirectToOptionalstring\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpdate the email for an authenticated userUpdate the phone number for an authenticated userUpdate the password for an authenticated userUpdate the user's metadataUpdate the user's password with a nonce\n\n`   1  const { data, error } = await supabase.auth.updateUser({    2  email: 'new@email.com'    3  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"new_email\": \"new@email.com\",    12  \"email_change_sent_at\": \"2024-01-01T00:00:00Z\",    13  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    14  \"app_metadata\": {    15  \"provider\": \"email\",    16  \"providers\": [    17  \"email\"    18  ]    19  },    20  \"user_metadata\": {    21  \"email\": \"example@email.com\",    22  \"email_verified\": false,    23  \"phone_verified\": false,    24  \"sub\": \"11111111-1111-1111-1111-111111111111\"    25  },    26  \"identities\": [    27  {    28  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    29  \"id\": \"11111111-1111-1111-1111-111111111111\",    30  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    31  \"identity_data\": {    32  \"email\": \"example@email.com\",    33  \"email_verified\": false,    34  \"phone_verified\": false,    35  \"sub\": \"11111111-1111-1111-1111-111111111111\"    36  },    37  \"provider\": \"email\",    38  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    39  \"created_at\": \"2024-01-01T00:00:00Z\",    40  \"updated_at\": \"2024-01-01T00:00:00Z\",    41  \"email\": \"example@email.com\"    42  }    43  ],    44  \"created_at\": \"2024-01-01T00:00:00Z\",    45  \"updated_at\": \"2024-01-01T00:00:00Z\",    46  \"is_anonymous\": false    47  }    48  },    49  \"error\": null    50  }            `\n\nNotes\n\nSends a \"Confirm Email Change\" email to the new email address.\n\n* * *\n\n## Retrieve identities linked to a user\n\nGets all the identities linked to a user.\n\n*   The user needs to be signed in to call `getUserIdentities()`.\n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nReturns a list of identities linked to the user\n\n`   1  const { data, error } = await supabase.auth.getUserIdentities()            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"identities\": [    4  {    5  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    6  \"id\": \"2024-01-01T00:00:00Z\",    7  \"user_id\": \"2024-01-01T00:00:00Z\",    8  \"identity_data\": {    9  \"email\": \"example@email.com\",    10  \"email_verified\": false,    11  \"phone_verified\": false,    12  \"sub\": \"11111111-1111-1111-1111-111111111111\"    13  },    14  \"provider\": \"email\",    15  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    16  \"created_at\": \"2024-01-01T00:00:00Z\",    17  \"updated_at\": \"2024-01-01T00:00:00Z\",    18  \"email\": \"example@email.com\"    19  }    20  ]    21  },    22  \"error\": null    23  }            `\n\n* * *\n\n## Link an identity to a user\n\nLinks an oauth identity to an existing user. This method supports the PKCE flow.\n\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n*   The user needs to be signed in to call `linkIdentity()`.\n*   If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\n*   If `linkIdentity` is run in the browser, the user is automatically redirected to the returned URL. On the server, you should handle the redirect.\n\n### Parameters\n\n*   credentialsRequiredSignInWithOAuthCredentials\n    \n    Details\n    \n    *   providerRequiredUnion: expand to see options\n        \n        One of the providers supported by GoTrue.\n        \n        Details\n        \n    *   optionsOptionalobject\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nLink an identity to a user\n\n`   1  const { data, error } = await supabase.auth.linkIdentity({    2  provider: 'github'    3  })            `\n\nResponse\n\n`   1  {    2  data: {    3  provider: 'github',    4  url: <PROVIDER_URL_TO_REDIRECT_TO>    5  },    6  error: null    7  }            `\n\n* * *\n\n## Unlink an identity from a user\n\nUnlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n\n*   The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n*   The user needs to be signed in to call `unlinkIdentity()`.\n*   The user must have at least 2 identities in order to unlink an identity.\n*   The identity to be unlinked must belong to the user.\n\n### Parameters\n\n*   identityRequiredUserIdentity\n    \n    Details\n    \n    *   idRequiredstring\n        \n    *   identity\\_idRequiredstring\n        \n    *   providerRequiredstring\n        \n    *   user\\_idRequiredstring\n        \n    *   created\\_atOptionalstring\n        \n    *   identity\\_dataOptional{ \\[key: string\\]: any }\n        \n    *   last\\_sign\\_in\\_atOptionalstring\n        \n    *   updated\\_atOptionalstring\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUnlink an identity\n\n`   1  // retrieve all identites linked to a user    2  const identities = await supabase.auth.getUserIdentities()    3      4  // find the google identity    5  const googleIdentity = identities.find(    6  identity => identity.provider === 'google'    7  )    8      9  // unlink the google identity    10  const { error } = await supabase.auth.unlinkIdentity(googleIdentity)            `\n\n* * *\n\n## Send a password reauthentication nonce\n\nSends a reauthentication OTP to the user's email or phone number. Requires the user to be signed-in.\n\n*   This method is used together with `updateUser()` when a user's password needs to be updated.\n*   If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n*   A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n*   This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSend reauthentication nonce\n\n`   1  const { error } = await supabase.auth.reauthenticate()            `\n\nNotes\n\nSends a reauthentication nonce to the user's email or phone number.\n\n* * *\n\n## Resend an OTP\n\nResends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n\n*   Resends a signup confirmation, email change or phone change email to the user.\n*   Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\n*   Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\n*   This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n*   You can specify a redirect url when you resend an email link using the `emailRedirectTo` option.\n\n### Parameters\n\n*   credentialsRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nResend an email signup confirmationResend a phone signup confirmationResend email change emailResend phone change OTP\n\n`   1  const { error } = await supabase.auth.resend({    2  type: 'signup',    3  email: 'email@example.com',    4  options: {    5  emailRedirectTo: 'https://example.com/welcome'    6  }    7  })            `\n\nNotes\n\nResends the email signup confirmation to the user\n\n* * *\n\n## Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.\n\n### Parameters\n\n*   currentSessionRequiredobject\n    \n    The current session that minimally contains an access token and refresh token.\n    \n    Details\n    \n    *   access\\_tokenRequiredstring\n        \n    *   refresh\\_tokenRequiredstring\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nSet the session\n\n`   1  const { data, error } = await supabase.auth.setSession({    2  access_token,    3  refresh_token    4  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    12  \"app_metadata\": {    13  \"provider\": \"email\",    14  \"providers\": [    15  \"email\"    16  ]    17  },    18  \"user_metadata\": {    19  \"email\": \"example@email.com\",    20  \"email_verified\": false,    21  \"phone_verified\": false,    22  \"sub\": \"11111111-1111-1111-1111-111111111111\"    23  },    24  \"identities\": [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"example@email.com\",    31  \"email_verified\": false,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"example@email.com\"    40  }    41  ],    42  \"created_at\": \"2024-01-01T00:00:00Z\",    43  \"updated_at\": \"2024-01-01T00:00:00Z\",    44  \"is_anonymous\": false    45  },    46  \"session\": {    47  \"access_token\": \"<ACCESS_TOKEN>\",    48  \"refresh_token\": \"<REFRESH_TOKEN>\",    49  \"user\": {    50  \"id\": \"11111111-1111-1111-1111-111111111111\",    51  \"aud\": \"authenticated\",    52  \"role\": \"authenticated\",    53  \"email\": \"example@email.com\",    54  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    55  \"phone\": \"\",    56  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    57  \"last_sign_in_at\": \"11111111-1111-1111-1111-111111111111\",    58  \"app_metadata\": {    59  \"provider\": \"email\",    60  \"providers\": [    61  \"email\"    62  ]    63  },    64  \"user_metadata\": {    65  \"email\": \"example@email.com\",    66  \"email_verified\": false,    67  \"phone_verified\": false,    68  \"sub\": \"11111111-1111-1111-1111-111111111111\"    69  },    70  \"identities\": [    71  {    72  \"identity_id\": \"2024-01-01T00:00:00Z\",    73  \"id\": \"11111111-1111-1111-1111-111111111111\",    74  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    75  \"identity_data\": {    76  \"email\": \"example@email.com\",    77  \"email_verified\": false,    78  \"phone_verified\": false,    79  \"sub\": \"11111111-1111-1111-1111-111111111111\"    80  },    81  \"provider\": \"email\",    82  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    83  \"created_at\": \"2024-01-01T00:00:00Z\",    84  \"updated_at\": \"2024-01-01T00:00:00Z\",    85  \"email\": \"example@email.com\"    86  }    87  ],    88  \"created_at\": \"2024-01-01T00:00:00Z\",    89  \"updated_at\": \"2024-01-01T00:00:00Z\",    90  \"is_anonymous\": false    91  },    92  \"token_type\": \"bearer\",    93  \"expires_in\": 3500,    94  \"expires_at\": 1700000000    95  }    96  },    97  \"error\": null    98  }            `\n\nNotes\n\nSets the session data from an access\\_token and refresh\\_token, then returns an auth response or error.\n\n* * *\n\n## Exchange an auth code for a session\n\nLog in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n*   Used when `flowType` is set to `pkce` in client options.\n\n### Parameters\n\n*   authCodeRequiredstring\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nExchange Auth Code\n\n`   1  supabase.auth.exchangeCodeForSession('34e770dd-9ff9-416c-87fa-43b31d7ef225')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  session: {    4  access_token: '<ACCESS_TOKEN>',    5  token_type: 'bearer',    6  expires_in: 3600,    7  expires_at: 1700000000,    8  refresh_token: '<REFRESH_TOKEN>',    9  user: {    10  id: '11111111-1111-1111-1111-111111111111',    11  aud: 'authenticated',    12  role: 'authenticated',    13  email: 'example@email.com'    14  email_confirmed_at: '2024-01-01T00:00:00Z',    15  phone: '',    16  confirmation_sent_at: '2024-01-01T00:00:00Z',    17  confirmed_at: '2024-01-01T00:00:00Z',    18  last_sign_in_at: '2024-01-01T00:00:00Z',    19  app_metadata: {    20  \"provider\": \"email\",    21  \"providers\": [    22  \"email\",    23  \"<OTHER_PROVIDER>\"    24  ]    25  },    26  user_metadata: {    27  email: 'email@email.com',    28  email_verified: true,    29  full_name: 'User Name',    30  iss: '<ISS>',    31  name: 'User Name',    32  phone_verified: false,    33  provider_id: '<PROVIDER_ID>',    34  sub: '<SUB>'    35  },    36  identities: [    37  {    38  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    39  \"id\": \"11111111-1111-1111-1111-111111111111\",    40  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    41  \"identity_data\": {    42  \"email\": \"example@email.com\",    43  \"email_verified\": false,    44  \"phone_verified\": false,    45  \"sub\": \"11111111-1111-1111-1111-111111111111\"    46  },    47  \"provider\": \"email\",    48  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    49  \"created_at\": \"2024-01-01T00:00:00Z\",    50  \"updated_at\": \"2024-01-01T00:00:00Z\",    51  \"email\": \"email@example.com\"    52  },    53  {    54  \"identity_id\": \"33333333-3333-3333-3333-333333333333\",    55  \"id\": \"<ID>\",    56  \"user_id\": \"<USER_ID>\",    57  \"identity_data\": {    58  \"email\": \"example@email.com\",    59  \"email_verified\": true,    60  \"full_name\": \"User Name\",    61  \"iss\": \"<ISS>\",    62  \"name\": \"User Name\",    63  \"phone_verified\": false,    64  \"provider_id\": \"<PROVIDER_ID>\",    65  \"sub\": \"<SUB>\"    66  },    67  \"provider\": \"<PROVIDER>\",    68  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    69  \"created_at\": \"2024-01-01T00:00:00Z\",    70  \"updated_at\": \"2024-01-01T00:00:00Z\",    71  \"email\": \"example@email.com\"    72  }    73  ],    74  created_at: '2024-01-01T00:00:00Z',    75  updated_at: '2024-01-01T00:00:00Z',    76  is_anonymous: false    77  },    78  provider_token: '<PROVIDER_TOKEN>',    79  provider_refresh_token: '<PROVIDER_REFRESH_TOKEN>'    80  },    81  user: {    82  id: '11111111-1111-1111-1111-111111111111',    83  aud: 'authenticated',    84  role: 'authenticated',    85  email: 'example@email.com',    86  email_confirmed_at: '2024-01-01T00:00:00Z',    87  phone: '',    88  confirmation_sent_at: '2024-01-01T00:00:00Z',    89  confirmed_at: '2024-01-01T00:00:00Z',    90  last_sign_in_at: '2024-01-01T00:00:00Z',    91  app_metadata: {    92  provider: 'email',    93  providers: [    94  \"email\",    95  \"<OTHER_PROVIDER>\"    96  ]    97  },    98  user_metadata: {    99  email: 'email@email.com',    100  email_verified: true,    101  full_name: 'User Name',    102  iss: '<ISS>',    103  name: 'User Name',    104  phone_verified: false,    105  provider_id: '<PROVIDER_ID>',    106  sub: '<SUB>'    107  },    108  identities: [    109  {    110  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    111  \"id\": \"11111111-1111-1111-1111-111111111111\",    112  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    113  \"identity_data\": {    114  \"email\": \"example@email.com\",    115  \"email_verified\": false,    116  \"phone_verified\": false,    117  \"sub\": \"11111111-1111-1111-1111-111111111111\"    118  },    119  \"provider\": \"email\",    120  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    121  \"created_at\": \"2024-01-01T00:00:00Z\",    122  \"updated_at\": \"2024-01-01T00:00:00Z\",    123  \"email\": \"email@example.com\"    124  },    125  {    126  \"identity_id\": \"33333333-3333-3333-3333-333333333333\",    127  \"id\": \"<ID>\",    128  \"user_id\": \"<USER_ID>\",    129  \"identity_data\": {    130  \"email\": \"example@email.com\",    131  \"email_verified\": true,    132  \"full_name\": \"User Name\",    133  \"iss\": \"<ISS>\",    134  \"name\": \"User Name\",    135  \"phone_verified\": false,    136  \"provider_id\": \"<PROVIDER_ID>\",    137  \"sub\": \"<SUB>\"    138  },    139  \"provider\": \"<PROVIDER>\",    140  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    141  \"created_at\": \"2024-01-01T00:00:00Z\",    142  \"updated_at\": \"2024-01-01T00:00:00Z\",    143  \"email\": \"example@email.com\"    144  }    145  ],    146  created_at: '2024-01-01T00:00:00Z',    147  updated_at: '2024-01-01T00:00:00Z',    148  is_anonymous: false    149  },    150  redirectType: null    151  },    152  \"error\": null    153  }            `\n\n* * *\n\n## Start auto-refresh session (non-browser)\n\nStarts an auto-refresh process in the background. The session is checked every few seconds. Close to the time of expiration a process is started to refresh the session. If refreshing fails it will be retried for as long as necessary.\n\n*   Only useful in non-browser environments such as React Native or Electron.\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\n*   To give this hint to the application, you should be calling this method when the app is in focus and calling `supabase.auth.stopAutoRefresh()` when it's out of focus.\n\n### Return Type\n\nPromise<void>\n\nStart and stop auto refresh in React Native\n\n`   1  import { AppState } from 'react-native'    2      3  // make sure you register this only once!    4  AppState.addEventListener('change', (state) => {    5  if (state === 'active') {    6  supabase.auth.startAutoRefresh()    7  } else {    8  supabase.auth.stopAutoRefresh()    9  }    10  })            `\n\n* * *\n\n## Stop auto-refresh session (non-browser)\n\nStops an active auto refresh process running in the background (if any).\n\n*   Only useful in non-browser environments such as React Native or Electron.\n*   The Supabase Auth library automatically starts and stops proactively refreshing the session when a tab is focused or not.\n*   On non-browser platforms, such as mobile or desktop apps built with web technologies, the library is not able to effectively determine whether the application is _focused_ or not.\n*   When your application goes in the background or out of focus, call this method to stop the proactive refreshing of the session.\n\n### Return Type\n\nPromise<void>\n\nStart and stop auto refresh in React Native\n\n`   1  import { AppState } from 'react-native'    2      3  // make sure you register this only once!    4  AppState.addEventListener('change', (state) => {    5  if (state === 'active') {    6  supabase.auth.startAutoRefresh()    7  } else {    8  supabase.auth.stopAutoRefresh()    9  }    10  })            `\n\n* * *\n\n## Auth MFA\n\nThis section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, there is support for time-based one-time password (TOTP) and phone verification code as the 2nd factor. Recovery codes are not supported but users can enroll multiple factors, with an upper limit of 10.\n\nHaving a 2nd factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup factor.\n\n* * *\n\n## Enroll a factor\n\nStarts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it.\n\n*   Use `totp` or `phone` as the `factorType` and use the returned `id` to create a challenge.\n*   To create a challenge, see [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge).\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify).\n*   To create and verify a TOTP challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/javascript/auth-mfa-challengeandverify).\n*   To generate a QR code for the `totp` secret in Next.js, you can do the following:\n\n`   1  <Image src={data.totp.qr_code} alt={data.totp.uri} layout=\"fill\"></Image>            `\n\n*   The `challenge` and `verify` steps are separated when using Phone factors as the user will need time to receive and input the code obtained from the SMS in challenge.\n\n### Parameters\n\n*   paramsRequiredMFAEnrollParams\n    \n    Details\n    \n    *   factorTypeRequired\"totp\"\n        \n        The type of factor being enrolled.\n        \n    *   friendlyNameOptionalstring\n        \n        Human readable name assigned to the factor.\n        \n    *   issuerOptionalstring\n        \n        Domain which the user is enrolled with.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nEnroll a time-based, one-time password (TOTP) factorEnroll a Phone Factor\n\n`   1  const { data, error } = await supabase.auth.mfa.enroll({    2  factorType: 'totp',    3  friendlyName: 'your_friendly_name'    4  })    5      6  // Use the id to create a challenge.    7  // The challenge can be verified by entering the code generated from the authenticator app.    8  // The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.    9  const { id, type, totp: { qr_code, secret, uri }, friendly_name } = data    10  const challenge = await supabase.auth.mfa.challenge({ factorId: id });            `\n\nResponse\n\n`   1  {    2  data: {    3  id: '<ID>',    4  type: 'totp'    5  totp: {    6  qr_code: '<QR_CODE_AS_SVG_DATA>',    7  secret: '<SECRET>',    8  uri: '<URI>',    9  }    10  friendly_name?: 'Important app'    11  },    12  error: null    13  }            `\n\n* * *\n\n## Create a challenge\n\nPrepares a challenge used to verify that a user has access to a MFA factor.\n\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll) is required before creating a challenge.\n*   To verify a challenge, see [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify).\n*   A phone factor sends a code to the user upon challenge. The channel defaults to `sms` unless otherwise specified.\n\n### Parameters\n\n*   paramsRequiredMFAChallengeParams\n    \n    Details\n    \n    *   factorIdRequiredstring\n        \n        ID of the factor to be challenged. Returned in enroll().\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate a challenge for a factorCreate a challenge for a phone factorCreate a challenge for a phone factor (WhatsApp)\n\n`   1  const { data, error } = await supabase.auth.mfa.challenge({    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225'    3  })            `\n\nResponse\n\n`   1  {    2  data: {    3  id: '<ID>',    4  type: 'totp',    5  expires_at: 1700000000    6  },    7  error: null    8  }            `\n\n* * *\n\n## Verify a challenge\n\nVerifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\n\n*   To verify a challenge, please [create a challenge](/docs/reference/javascript/auth-mfa-challenge) first.\n\n### Parameters\n\n*   paramsRequiredMFAVerifyParams\n    \n    Details\n    \n    *   challengeIdRequiredstring\n        \n        ID of the challenge being verified. Returned in challenge().\n        \n    *   codeRequiredstring\n        \n        Verification code provided by the user.\n        \n    *   factorIdRequiredstring\n        \n        ID of the factor being verified. Returned in enroll().\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nVerify a challenge for a factor\n\n`   1  const { data, error } = await supabase.auth.mfa.verify({    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    4  code: '123456'    5  })            `\n\nResponse\n\n`   1  {    2  data: {    3  access_token: '<ACCESS_TOKEN>',    4  token_type: 'Bearer',    5  expires_in: 3600,    6  refresh_token: '<REFRESH_TOKEN>',    7  user: {    8  id: '11111111-1111-1111-1111-111111111111',    9  aud: 'authenticated',    10  role: 'authenticated',    11  email: 'example@email.com',    12  email_confirmed_at: '2024-01-01T00:00:00Z',    13  phone: '',    14  confirmation_sent_at: '2024-01-01T00:00:00Z',    15  confirmed_at: '2024-01-01T00:00:00Z',    16  last_sign_in_at: '2024-01-01T00:00:00Z',    17  app_metadata: {    18  provider: 'email',    19  providers: [    20  \"email\",    21  ]    22  },    23  user_metadata: {},    24  identities: [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"example@email.com\",    31  \"email_verified\": true,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"email@example.com\"    40  },    41  ],    42  created_at: '2024-01-01T00:00:00Z',    43  updated_at: '2024-01-01T00:00:00Z',    44  is_anonymous: false,    45  factors: [    46  \"id\": '<ID>',    47  \"friendly_name\": 'Important Auth App',    48  \"factor_type\": 'totp',    49  \"status\": 'verified',    50  \"created_at\": \"2024-01-01T00:00:00Z\",    51  \"updated_at\": \"2024-01-01T00:00:00Z\"    52  ]    53  }    54  }    55  error: null    56  }            `\n\n* * *\n\n## Create and verify a challenge\n\nHelper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\n\n*   Intended for use with only TOTP factors.\n*   An [enrolled factor](/docs/reference/javascript/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n*   Executes [`mfa.challenge()`](/docs/reference/javascript/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/javascript/auth-mfa-verify) in a single step.\n\n### Parameters\n\n*   paramsRequiredMFAChallengeAndVerifyParams\n    \n    Details\n    \n    *   codeRequiredstring\n        \n        Verification code provided by the user.\n        \n    *   factorIdRequiredstring\n        \n        ID of the factor being verified. Returned in enroll().\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate and verify a challenge for a factor\n\n`   1  const { data, error } = await supabase.auth.mfa.challengeAndVerify({    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  code: '123456'    4  })            `\n\nResponse\n\n`   1  {    2  data: {    3  access_token: '<ACCESS_TOKEN>',    4  token_type: 'Bearer',    5  expires_in: 3600,    6  refresh_token: '<REFRESH_TOKEN>',    7  user: {    8  id: '11111111-1111-1111-1111-111111111111',    9  aud: 'authenticated',    10  role: 'authenticated',    11  email: 'example@email.com',    12  email_confirmed_at: '2024-01-01T00:00:00Z',    13  phone: '',    14  confirmation_sent_at: '2024-01-01T00:00:00Z',    15  confirmed_at: '2024-01-01T00:00:00Z',    16  last_sign_in_at: '2024-01-01T00:00:00Z',    17  app_metadata: {    18  provider: 'email',    19  providers: [    20  \"email\",    21  ]    22  },    23  user_metadata: {},    24  identities: [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"example@email.com\",    31  \"email_verified\": true,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"email@example.com\"    40  },    41  ],    42  created_at: '2024-01-01T00:00:00Z',    43  updated_at: '2024-01-01T00:00:00Z',    44  is_anonymous: false,    45  factors: [    46  \"id\": '<ID>',    47  \"friendly_name\": 'Important Auth App',    48  \"factor_type\": 'totp',    49  \"status\": 'verified',    50  \"created_at\": \"2024-01-01T00:00:00Z\",    51  \"updated_at\": \"2024-01-01T00:00:00Z\"    52  ]    53  }    54  }    55  error: null    56  }            `\n\n* * *\n\n## Unenroll a factor\n\nUnenroll removes a MFA factor. A user has to have an `aal2` authenticator level in order to unenroll a `verified` factor.\n\n### Parameters\n\n*   paramsRequiredMFAUnenrollParams\n    \n    Details\n    \n    *   factorIdRequiredstring\n        \n        ID of the factor being unenrolled.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUnenroll a factor\n\n`   1  const { data, error } = await supabase.auth.mfa.unenroll({    2  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  })            `\n\nResponse\n\n`   1  {    2  data: {    3  id: '<FACTOR_ID>'    4  },    5  error: null    6  }            `\n\n* * *\n\n## Get Authenticator Assurance Level\n\nReturns the Authenticator Assurance Level (AAL) for the active session.\n\n*   Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n*   In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP) or Phone factor.\n*   If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nGet the AAL details of a session\n\n`   1  const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()    2  const { currentLevel, nextLevel, currentAuthenticationMethods } = data            `\n\nResponse\n\n`   1  {    2  data: {    3  currentLevel: 'aal1',    4  nextLevel: 'aal2',    5  currentAuthenticationMethods: [    6  {    7  method: 'password',    8  timestamp: 1700000000    9  }    10  ]    11  }    12  error: null    13  }            `\n\n* * *\n\n## Auth Admin\n\n*   Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n*   These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n\nCreate server-side auth client\n\n`   1  import { createClient } from '@supabase/supabase-js'    2      3  const supabase = createClient(supabase_url, service_role_key, {    4  auth: {    5  autoRefreshToken: false,    6  persistSession: false    7  }    8  })    9      10  // Access auth admin api    11  const adminAuthClient = supabase.auth.admin            `\n\n* * *\n\n## Retrieve a user\n\nGet user by id.\n\n*   Fetches the user object from the database based on the user's id.\n*   The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\n\n### Parameters\n\n*   uidRequiredstring\n    \n    The user's unique identifier\n    \n    This function should only be called on a server. Never expose your `service_role` key in the browser.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nFetch the user object using the access\\_token jwt\n\n`   1  const { data, error } = await supabase.auth.admin.getUserById(1)            `\n\nResponse\n\n`   1  {    2  data: {    3  user: {    4  id: '1',    5  aud: 'authenticated',    6  role: 'authenticated',    7  email: 'example@email.com',    8  email_confirmed_at: '2024-01-01T00:00:00Z',    9  phone: '',    10  confirmation_sent_at: '2024-01-01T00:00:00Z',    11  confirmed_at: '2024-01-01T00:00:00Z',    12  last_sign_in_at: '2024-01-01T00:00:00Z',    13  app_metadata: {},    14  user_metadata: {},    15  identities: [    16  {    17  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    18  \"id\": \"1\",    19  \"user_id\": \"1\",    20  \"identity_data\": {    21  \"email\": \"example@email.com\",    22  \"email_verified\": true,    23  \"phone_verified\": false,    24  \"sub\": \"1\"    25  },    26  \"provider\": \"email\",    27  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    28  \"created_at\": \"2024-01-01T00:00:00Z\",    29  \"updated_at\": \"2024-01-01T00:00:00Z\",    30  \"email\": \"email@example.com\"    31  },    32  ],    33  created_at: '2024-01-01T00:00:00Z',    34  updated_at: '2024-01-01T00:00:00Z',    35  is_anonymous: false,    36  }    37  }    38  error: null    39  }            `\n\n* * *\n\n## List all users\n\nGet a list of users.\n\n*   Defaults to return 50 users per page.\n\n### Parameters\n\n*   paramsOptionalPageParams\n    \n    An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n    \n    Details\n    \n    *   pageOptionalnumber\n        \n        The page number\n        \n    *   perPageOptionalnumber\n        \n        Number of items returned per page\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nGet a page of usersPaginated list of users\n\n`   1  const { data: { users }, error } = await supabase.auth.admin.listUsers()            `\n\n* * *\n\n## Create a user\n\nCreates a new user. This function should only be called on a server. Never expose your `service_role` key in the browser.\n\n*   To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n*   `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/javascript/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n*   If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n\n### Parameters\n\n*   attributesRequiredAdminUserAttributes\n    \n    Details\n    \n    *   app\\_metadataOptionalobject\n        \n        A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n        \n    *   ban\\_durationOptionalstring\n        \n        Determines how long a user is banned for.\n        \n    *   emailOptionalstring\n        \n        The user's email.\n        \n    *   email\\_confirmOptionalboolean\n        \n        Confirms the user's email address if set to true.\n        \n    *   nonceOptionalstring\n        \n        The nonce sent for reauthentication if the user's password is to be updated.\n        \n    *   passwordOptionalstring\n        \n        The user's password.\n        \n    *   phoneOptionalstring\n        \n        The user's phone.\n        \n    *   phone\\_confirmOptionalboolean\n        \n        Confirms the user's phone number if set to true.\n        \n    *   roleOptionalstring\n        \n        The `role` claim set in the user's access token JWT.\n        \n    *   user\\_metadataOptionalobject\n        \n        A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nWith custom user metadataAuto-confirm the user's emailAuto-confirm the user's phone number\n\n`   1  const { data, error } = await supabase.auth.admin.createUser({    2  email: 'user@email.com',    3  password: 'password',    4  user_metadata: { name: 'Yoda' }    5  })            `\n\nResponse\n\n`   1  {    2  data: {    3  user: {    4  id: '1',    5  aud: 'authenticated',    6  role: 'authenticated',    7  email: 'example@email.com',    8  email_confirmed_at: '2024-01-01T00:00:00Z',    9  phone: '',    10  confirmation_sent_at: '2024-01-01T00:00:00Z',    11  confirmed_at: '2024-01-01T00:00:00Z',    12  last_sign_in_at: '2024-01-01T00:00:00Z',    13  app_metadata: {},    14  user_metadata: {},    15  identities: [    16  {    17  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    18  \"id\": \"1\",    19  \"user_id\": \"1\",    20  \"identity_data\": {    21  \"email\": \"example@email.com\",    22  \"email_verified\": true,    23  \"phone_verified\": false,    24  \"sub\": \"1\"    25  },    26  \"provider\": \"email\",    27  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    28  \"created_at\": \"2024-01-01T00:00:00Z\",    29  \"updated_at\": \"2024-01-01T00:00:00Z\",    30  \"email\": \"email@example.com\"    31  },    32  ],    33  created_at: '2024-01-01T00:00:00Z',    34  updated_at: '2024-01-01T00:00:00Z',    35  is_anonymous: false,    36  }    37  }    38  error: null    39  }            `\n\n* * *\n\n## Delete a user\n\nDelete a user. Requires a `service_role` key.\n\n*   The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n\n### Parameters\n\n*   idRequiredstring\n    \n    The user id you want to remove.\n    \n*   shouldSoftDeleteRequiredboolean\n    \n    If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n    \n    This function should only be called on a server. Never expose your `service_role` key in the browser.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nRemoves a user\n\n`   1  const { data, error } = await supabase.auth.admin.deleteUser(    2  '715ed5db-f090-4b8c-a067-640ecee36aa0'    3  )            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {}    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Send an email invite link\n\nSends an invite link to an email address.\n\n*   Sends an invite link to the user's email address.\n*   The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\n*   Note that PKCE is not supported when using `inviteUserByEmail`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n\n### Parameters\n\n*   emailRequiredstring\n    \n    The email address of the user.\n    \n*   optionsRequiredobject\n    \n    Additional options to be included when inviting.\n    \n    Details\n    \n    *   dataOptionalobject\n        \n        A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column.\n        \n    *   redirectToOptionalstring\n        \n        The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nInvite a user\n\n`   1  const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"example@email.com\",    8  \"invited_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",    11  \"app_metadata\": {    12  \"provider\": \"email\",    13  \"providers\": [    14  \"email\"    15  ]    16  },    17  \"user_metadata\": {},    18  \"identities\": [    19  {    20  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    21  \"id\": \"11111111-1111-1111-1111-111111111111\",    22  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    23  \"identity_data\": {    24  \"email\": \"example@email.com\",    25  \"email_verified\": false,    26  \"phone_verified\": false,    27  \"sub\": \"11111111-1111-1111-1111-111111111111\"    28  },    29  \"provider\": \"email\",    30  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    31  \"created_at\": \"2024-01-01T00:00:00Z\",    32  \"updated_at\": \"2024-01-01T00:00:00Z\",    33  \"email\": \"example@email.com\"    34  }    35  ],    36  \"created_at\": \"2024-01-01T00:00:00Z\",    37  \"updated_at\": \"2024-01-01T00:00:00Z\",    38  \"is_anonymous\": false    39  }    40  },    41  \"error\": null    42  }            `\n\n* * *\n\n## Generate an email link\n\nGenerates email links and OTPs to be sent via a custom email provider.\n\n*   The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n*   `generateLink()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n*   `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n\n### Parameters\n\n*   paramsRequiredGenerateLinkParams\n    \n    Details\n    \n    *   typeRequiredsignup | invite | magiclink | recovery | email\\_change\\_current | email\\_change\\_new\n        \n    *   emailRequiredstring\n        \n    *   passwordOptionalstring\n        \n        Only required if type is `signup`.\n        \n    *   newEmailOptionalstring\n        \n        Only required if type is `email_change_current` or `email_change_new`.\n        \n    *   optionsOptionalobject\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nGenerate a signup linkGenerate an invite linkGenerate a magic linkGenerate a recovery linkGenerate links to change current email address\n\n`   1  const { data, error } = await supabase.auth.admin.generateLink({    2  type: 'signup',    3  email: 'email@example.com',    4  password: 'secret'    5  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"properties\": {    4  \"action_link\": \"<LINK_TO_SEND_TO_USER>\",    5  \"email_otp\": \"999999\",    6  \"hashed_token\": \"<HASHED_TOKEN\",    7  \"redirect_to\": \"<REDIRECT_URL>\",    8  \"verification_type\": \"signup\"    9  },    10  \"user\": {    11  \"id\": \"11111111-1111-1111-1111-111111111111\",    12  \"aud\": \"authenticated\",    13  \"role\": \"authenticated\",    14  \"email\": \"email@example.com\",    15  \"phone\": \"\",    16  \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",    17  \"app_metadata\": {    18  \"provider\": \"email\",    19  \"providers\": [    20  \"email\"    21  ]    22  },    23  \"user_metadata\": {},    24  \"identities\": [    25  {    26  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    27  \"id\": \"11111111-1111-1111-1111-111111111111\",    28  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    29  \"identity_data\": {    30  \"email\": \"email@example.com\",    31  \"email_verified\": false,    32  \"phone_verified\": false,    33  \"sub\": \"11111111-1111-1111-1111-111111111111\"    34  },    35  \"provider\": \"email\",    36  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    37  \"created_at\": \"2024-01-01T00:00:00Z\",    38  \"updated_at\": \"2024-01-01T00:00:00Z\",    39  \"email\": \"email@example.com\"    40  }    41  ],    42  \"created_at\": \"2024-01-01T00:00:00Z\",    43  \"updated_at\": \"2024-01-01T00:00:00Z\",    44  \"is_anonymous\": false    45  }    46  },    47  \"error\": null    48  }            `\n\n* * *\n\n## Update a user\n\nUpdates the user data.\n\n### Parameters\n\n*   uidRequiredstring\n    \n*   attributesRequiredAdminUserAttributes\n    \n    The data you want to update.\n    \n    This function should only be called on a server. Never expose your `service_role` key in the browser.\n    \n    Details\n    \n    *   app\\_metadataOptionalobject\n        \n        A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n        \n    *   ban\\_durationOptionalstring\n        \n        Determines how long a user is banned for.\n        \n    *   emailOptionalstring\n        \n        The user's email.\n        \n    *   email\\_confirmOptionalboolean\n        \n        Confirms the user's email address if set to true.\n        \n    *   nonceOptionalstring\n        \n        The nonce sent for reauthentication if the user's password is to be updated.\n        \n    *   passwordOptionalstring\n        \n        The user's password.\n        \n    *   phoneOptionalstring\n        \n        The user's phone.\n        \n    *   phone\\_confirmOptionalboolean\n        \n        Confirms the user's phone number if set to true.\n        \n    *   roleOptionalstring\n        \n        The `role` claim set in the user's access token JWT.\n        \n    *   user\\_metadataOptionalobject\n        \n        A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpdates a user's emailUpdates a user's passwordUpdates a user's metadataUpdates a user's app\\_metadataConfirms a user's email addressConfirms a user's phone number\n\n`   1  const { data: user, error } = await supabase.auth.admin.updateUserById(    2  '11111111-1111-1111-1111-111111111111',    3  { email: 'new@email.com' }    4  )            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"user\": {    4  \"id\": \"11111111-1111-1111-1111-111111111111\",    5  \"aud\": \"authenticated\",    6  \"role\": \"authenticated\",    7  \"email\": \"new@email.com\",    8  \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",    9  \"phone\": \"\",    10  \"confirmed_at\": \"2024-01-01T00:00:00Z\",    11  \"recovery_sent_at\": \"2024-01-01T00:00:00Z\",    12  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    13  \"app_metadata\": {    14  \"provider\": \"email\",    15  \"providers\": [    16  \"email\"    17  ]    18  },    19  \"user_metadata\": {    20  \"email\": \"example@email.com\",    21  \"email_verified\": false,    22  \"phone_verified\": false,    23  \"sub\": \"11111111-1111-1111-1111-111111111111\"    24  },    25  \"identities\": [    26  {    27  \"identity_id\": \"22222222-2222-2222-2222-222222222222\",    28  \"id\": \"11111111-1111-1111-1111-111111111111\",    29  \"user_id\": \"11111111-1111-1111-1111-111111111111\",    30  \"identity_data\": {    31  \"email\": \"example@email.com\",    32  \"email_verified\": false,    33  \"phone_verified\": false,    34  \"sub\": \"11111111-1111-1111-1111-111111111111\"    35  },    36  \"provider\": \"email\",    37  \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",    38  \"created_at\": \"2024-01-01T00:00:00Z\",    39  \"updated_at\": \"2024-01-01T00:00:00Z\",    40  \"email\": \"example@email.com\"    41  }    42  ],    43  \"created_at\": \"2024-01-01T00:00:00Z\",    44  \"updated_at\": \"2024-01-01T00:00:00Z\",    45  \"is_anonymous\": false    46  }    47  },    48  \"error\": null    49  }            `\n\n* * *\n\n## Delete a factor for a user\n\nDeletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n\n### Parameters\n\n*   paramsRequiredAuthMFAAdminDeleteFactorParams\n    \n    Details\n    \n    *   idRequiredstring\n        \n        ID of the MFA factor to delete.\n        \n    *   userIdRequiredstring\n        \n        ID of the user whose factor is being deleted.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nDelete a factor for a user\n\n`   1  const { data, error } = await supabase.auth.admin.mfa.deleteFactor({    2  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225',    3  userId: 'a89baba7-b1b7-440f-b4bb-91026967f66b',    4  })            `\n\nResponse\n\n`   1  {    2  data: {    3  id: '34e770dd-9ff9-416c-87fa-43b31d7ef225'    4  },    5  error: null    6  }            `\n\n* * *\n\n## Invokes a Supabase Edge Function.\n\nInvokes a function\n\nInvoke a Supabase Edge Function.\n\n*   Requires an Authorization header.\n*   Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.\n*   When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behavior by passing in a `Content-Type` header of your own.\n*   Responses are automatically parsed as `json`, `blob` and `form-data` depending on the `Content-Type` header sent by your function. Responses are parsed as `text` by default.\n\n### Parameters\n\n*   functionNameRequiredstring\n    \n    The name of the Function to invoke.\n    \n*   optionsRequiredFunctionInvokeOptions\n    \n    Options for invoking the Function.\n    \n    Details\n    \n    *   bodyOptionalUnion: expand to see options\n        \n        The body of the request.\n        \n        Details\n        \n    *   headersOptional{ \\[key: string\\]: string }\n        \n        Object representing the headers to send with the request.\n        \n    *   methodOptionalUnion: expand to see options\n        \n        The HTTP verb of the request\n        \n        Details\n        \n    *   regionOptional\n        \n        The Region to invoke the function in.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nBasic invocationError handlingPassing custom headersCalling with DELETE HTTP verbInvoking a Function in the UsEast1 regionCalling with GET HTTP verb\n\n`   1  const { data, error } = await supabase.functions.invoke('hello', {    2  body: { foo: 'bar' }    3  })            `\n\n* * *\n\n## Subscribe to channel\n\nCreates an event handler that listens to changes.\n\n*   By default, Broadcast and Presence are enabled for all projects.\n*   By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n*   You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n*   Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n\n### Parameters\n\n*   typeRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1\"presence\"\n        \n    *   union option 2\"postgres\\_changes\"\n        \n    *   union option 3\"broadcast\"\n        \n    \n*   filterRequiredUnion: expand to see options\n    \n    Details\n    \n    *   union option 1object\n        \n        Details\n        \n    *   union option 2object\n        \n        Details\n        \n    *   union option 3object\n        \n        Details\n        \n    *   union option 4RealtimePostgresChangesFilter\n        \n        Details\n        \n    *   union option 5object\n        \n        Details\n        \n    \n*   callbackRequiredfunction\n    \n    Details\n    \n    *   Returnvoid\n        \n    \n\nListen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes\n\n`   1  const channel = supabase.channel(\"room1\")    2      3  channel.on(\"broadcast\", { event: \"cursor-pos\" }, (payload) => {    4  console.log(\"Cursor position received!\", payload);    5  }).subscribe((status) => {    6  if (status === \"SUBSCRIBED\") {    7  channel.send({    8  type: \"broadcast\",    9  event: \"cursor-pos\",    10  payload: { x: Math.random(), y: Math.random() },    11  });    12  }    13  });            `\n\n* * *\n\n## Unsubscribe from a channel\n\nUnsubscribes and removes Realtime channel from Realtime client.\n\n*   Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\n### Parameters\n\n*   channelRequired@supabase/realtime-js.RealtimeChannel\n    \n    The name of the Realtime channel.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1\"error\"\n    \n*   union option 2\"ok\"\n    \n*   union option 3\"timed out\"\n    \n\nRemoves a channel\n\n`   1  supabase.removeChannel(myChannel)            `\n\n* * *\n\n## Unsubscribe from all channels\n\nUnsubscribes and removes all Realtime channels from Realtime client.\n\n*   Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n\n### Return Type\n\nPromise<Array<Union: expand to see options>>\n\nDetails\n\n*   array elementUnion: expand to see options\n    \n    Details\n    \n\nRemove all channels\n\n`   1  supabase.removeAllChannels()            `\n\n* * *\n\n## Retrieve all channels\n\nReturns all Realtime channels.\n\n### Return Type\n\nArray<@supabase/realtime-js.RealtimeChannel>\n\nGet all channels\n\n`   1  const channels = supabase.getChannels()            `\n\n* * *\n\n## Broadcast a message\n\nSends a message into the channel.\n\nBroadcast a message to all connected clients to a channel.\n\n*   When using REST you don't need to subscribe to the channel\n*   REST calls are only available from 2.37.0 onwards\n\n### Parameters\n\n*   argsRequiredobject\n    \n    Arguments to send to channel\n    \n    Details\n    \n    *   eventRequiredstring\n        \n        The name of the event being sent\n        \n    *   typeRequiredUnion: expand to see options\n        \n        The type of event to send\n        \n        Details\n        \n    *   payloadOptionalany\n        \n        Payload to be sent\n        \n    \n*   optsRequired{ \\[key: string\\]: any }\n    \n    Options to be used during the send process\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1\"ok\"\n    \n*   union option 2\"timed out\"\n    \n*   union option 3\"error\"\n    \n\nSend a message via websocketSend a message via REST\n\n`   1  supabase    2  .channel('room1')    3  .subscribe((status) => {    4  if (status === 'SUBSCRIBED') {    5  channel.send({    6  type: 'broadcast',    7  event: 'cursor-pos',    8  payload: { x: Math.random(), y: Math.random() },    9  })    10  }    11  })            `\n\nResponse\n\n`   1  ok | timed out | error            `\n\n* * *\n\n## Create a bucket\n\nCreates a new Storage bucket\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `insert`\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredstring\n    \n    A unique identifier for the bucket you are creating.\n    \n*   optionsRequiredobject\n    \n    Details\n    \n    *   publicRequiredboolean\n        \n        The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n        \n    *   allowedMimeTypesOptionalUnion: expand to see options\n        \n        specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/\\*, or a specific mime type, e.g. image/png.\n        \n        Details\n        \n    *   fileSizeLimitOptionalUnion: expand to see options\n        \n        specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit.\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .createBucket('avatars', {    4  public: false,    5  allowedMimeTypes: ['image/png'],    6  fileSizeLimit: 1024    7  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"name\": \"avatars\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Retrieve a bucket\n\nRetrieves the details of an existing Storage bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `select`\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredstring\n    \n    The unique identifier of the bucket you would like to retrieve.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nGet bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .getBucket('avatars')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"id\": \"avatars\",    4  \"name\": \"avatars\",    5  \"owner\": \"\",    6  \"public\": false,    7  \"file_size_limit\": 1024,    8  \"allowed_mime_types\": [    9  \"image/png\"    10  ],    11  \"created_at\": \"2024-05-22T22:26:05.100Z\",    12  \"updated_at\": \"2024-05-22T22:26:05.100Z\"    13  },    14  \"error\": null    15  }            `\n\n* * *\n\n## List all buckets\n\nRetrieves the details of all Storage buckets within an existing project.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `select`\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nList buckets\n\n`   1  const { data, error } = await supabase    2  .storage    3  .listBuckets()            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"id\": \"avatars\",    5  \"name\": \"avatars\",    6  \"owner\": \"\",    7  \"public\": false,    8  \"file_size_limit\": 1024,    9  \"allowed_mime_types\": [    10  \"image/png\"    11  ],    12  \"created_at\": \"2024-05-22T22:26:05.100Z\",    13  \"updated_at\": \"2024-05-22T22:26:05.100Z\"    14  }    15  ],    16  \"error\": null    17  }            `\n\n* * *\n\n## Update a bucket\n\nUpdates a Storage bucket\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `select` and `update`\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredstring\n    \n    A unique identifier for the bucket you are updating.\n    \n*   optionsRequiredobject\n    \n    Details\n    \n    *   publicRequiredboolean\n        \n        The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n        \n    *   allowedMimeTypesOptionalUnion: expand to see options\n        \n        specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/\\*, or a specific mime type, e.g. image/png.\n        \n        Details\n        \n    *   fileSizeLimitOptionalUnion: expand to see options\n        \n        specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit.\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpdate bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .updateBucket('avatars', {    4  public: false,    5  allowedMimeTypes: ['image/png'],    6  fileSizeLimit: 1024    7  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"message\": \"Successfully updated\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Delete a bucket\n\nDeletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `select` and `delete`\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredstring\n    \n    The unique identifier of the bucket you would like to delete.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nDelete bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .deleteBucket('avatars')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"message\": \"Successfully deleted\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Empty a bucket\n\nRemoves all objects inside a single bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: `select`\n    *   `objects` table permissions: `select` and `delete`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   idRequiredstring\n    \n    The unique identifier of the bucket you would like to empty.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nEmpty bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .emptyBucket('avatars')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"message\": \"Successfully emptied\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Upload a file\n\nUploads a file to an existing bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n    \n*   fileBodyRequiredFileBody\n    \n    The body of the file to be stored in the bucket.\n    \n*   fileOptionsOptionalFileOptions\n    \n    Details\n    \n    *   cacheControlOptionalstring\n        \n        The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n        \n    *   contentTypeOptionalstring\n        \n        the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n        \n    *   duplexOptionalstring\n        \n        The duplex option is a string parameter that enables or disables duplex streaming, allowing for both reading and writing data in the same stream. It can be passed as an option to the fetch() method.\n        \n    *   upsertOptionalboolean\n        \n        When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpload fileUpload file using \\`ArrayBuffer\\` from base64 file data\n\n`   1  const avatarFile = event.target.files[0]    2  const { data, error } = await supabase    3  .storage    4  .from('avatars')    5  .upload('public/avatar1.png', avatarFile, {    6  cacheControl: '3600',    7  upsert: false    8  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"path\": \"public/avatar1.png\",    4  \"fullPath\": \"avatars/public/avatar1.png\"    5  },    6  \"error\": null    7  }            `\n\n* * *\n\n## Download a file\n\nDownloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The full path and file name of the file to be downloaded. For example `folder/image.png`.\n    \n*   optionsOptionalobject\n    \n    Details\n    \n    *   transformOptionalTransformOptions\n        \n        Transform the asset before serving it to the client.\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nDownload fileDownload file with transformations\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .download('folder/avatar1.png')            `\n\nResponse\n\n`   1  {    2  \"data\": <BLOB>,    3  \"error\": null    4  }            `\n\n* * *\n\n## List all files in a bucket\n\nLists all the files within a bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathOptionalstring\n    \n    The folder path.\n    \n*   optionsOptionalSearchOptions\n    \n    Details\n    \n    *   limitOptionalnumber\n        \n        The number of files you want to be returned.\n        \n    *   offsetOptionalnumber\n        \n        The starting position.\n        \n    *   searchOptionalstring\n        \n        The search string to filter files by.\n        \n    *   sortByOptionalSortBy\n        \n        The column to sort by. Can be any column inside a FileObject.\n        \n        Details\n        \n    \n*   parametersOptionalFetchParameters\n    \n    Details\n    \n    *   signalOptionalAbortSignal\n        \n        Pass in an AbortController's signal to cancel the request.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nList files in a bucketSearch files in a bucket\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .list('folder', {    5  limit: 100,    6  offset: 0,    7  sortBy: { column: 'name', order: 'asc' },    8  })            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"name\": \"avatar1.png\",    5  \"id\": \"e668cf7f-821b-4a2f-9dce-7dfa5dd1cfd2\",    6  \"updated_at\": \"2024-05-22T23:06:05.580Z\",    7  \"created_at\": \"2024-05-22T23:04:34.443Z\",    8  \"last_accessed_at\": \"2024-05-22T23:04:34.443Z\",    9  \"metadata\": {    10  \"eTag\": \"\\\"c5e8c553235d9af30ef4f6e280790b92\\\"\",    11  \"size\": 32175,    12  \"mimetype\": \"image/png\",    13  \"cacheControl\": \"max-age=3600\",    14  \"lastModified\": \"2024-05-22T23:06:05.574Z\",    15  \"contentLength\": 32175,    16  \"httpStatusCode\": 200    17  }    18  }    19  ],    20  \"error\": null    21  }            `\n\n* * *\n\n## Replace an existing file\n\nReplaces an existing file at the specified path with a new one.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n*   For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n    \n*   fileBodyRequiredUnion: expand to see options\n    \n    The body of the file to be stored in the bucket.\n    \n    Details\n    \n    *   union option 1string\n        \n    *   union option 2ArrayBuffer\n        \n    *   union option 3ArrayBufferView\n        \n    *   union option 4Blob\n        \n    *   union option 5@types/node.Buffer\n        \n    *   union option 6File\n        \n    *   union option 7FormData\n        \n    *   union option 8@types/node.NodeJS.ReadableStream\n        \n    *   union option 9ReadableStream\n        \n    *   union option 10URLSearchParams\n        \n    \n*   fileOptionsOptionalFileOptions\n    \n    Details\n    \n    *   cacheControlOptionalstring\n        \n        The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n        \n    *   contentTypeOptionalstring\n        \n        the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n        \n    *   duplexOptionalstring\n        \n        The duplex option is a string parameter that enables or disables duplex streaming, allowing for both reading and writing data in the same stream. It can be passed as an option to the fetch() method.\n        \n    *   upsertOptionalboolean\n        \n        When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpdate fileUpdate file using \\`ArrayBuffer\\` from base64 file data\n\n`   1  const avatarFile = event.target.files[0]    2  const { data, error } = await supabase    3  .storage    4  .from('avatars')    5  .update('public/avatar1.png', avatarFile, {    6  cacheControl: '3600',    7  upsert: true    8  })            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"path\": \"public/avatar1.png\",    4  \"fullPath\": \"avatars/public/avatar1.png\"    5  },    6  \"error\": null    7  }            `\n\n* * *\n\n## Move an existing file\n\nMoves an existing file to a new path in the same bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `update` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   fromPathRequiredstring\n    \n    The original file path, including the current file name. For example `folder/image.png`.\n    \n*   toPathRequiredstring\n    \n    The new file path, including the new file name. For example `folder/image-new.png`.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nMove file\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .move('public/avatar1.png', 'private/avatar2.png')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"message\": \"Successfully moved\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Copy an existing file\n\nCopies an existing file to a new path in the same bucket.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `insert` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   fromPathRequiredstring\n    \n    The original file path, including the current file name. For example `folder/image.png`.\n    \n*   toPathRequiredstring\n    \n    The new file path, including the new file name. For example `folder/image-copy.png`.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCopy file\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .copy('public/avatar1.png', 'private/avatar2.png')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"path\": \"avatars/private/avatar2.png\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Delete files in a bucket\n\nDeletes files within the same bucket\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `delete` and `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathsRequiredArray<string>\n    \n    An array of files to delete, including the path and file name. For example \\[`'folder/image.png'`\\].\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nDelete file\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .remove(['folder/avatar1.png'])            `\n\nResponse\n\n`   1  {    2  \"data\": [],    3  \"error\": null    4  }            `\n\n* * *\n\n## Create a signed URL\n\nCreates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The file path, including the current file name. For example `folder/image.png`.\n    \n*   expiresInRequirednumber\n    \n    The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n    \n*   optionsOptionalobject\n    \n    Details\n    \n    *   downloadOptionalUnion: expand to see options\n        \n        triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n        \n        Details\n        \n    *   transformOptionalTransformOptions\n        \n        Transform the asset before serving it to the client.\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate Signed URLCreate a signed URL for an asset with transformationsCreate a signed URL which triggers the download of the asset\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .createSignedUrl('folder/avatar1.png', 60)            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\"    4  },    5  \"error\": null    6  }            `\n\n* * *\n\n## Create signed URLs\n\nCreates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `select`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathsRequiredArray<string>\n    \n    The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n    \n*   expiresInRequirednumber\n    \n    The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n    \n*   optionsOptionalobject\n    \n    Details\n    \n    *   downloadRequiredUnion: expand to see options\n        \n        triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n        \n        Details\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate Signed URLs\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)            `\n\nResponse\n\n`   1  {    2  \"data\": [    3  {    4  \"error\": null,    5  \"path\": \"folder/avatar1.png\",    6  \"signedURL\": \"/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\",    7  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\"    8  },    9  {    10  \"error\": null,    11  \"path\": \"folder/avatar2.png\",    12  \"signedURL\": \"/object/sign/avatars/folder/avatar2.png?token=<TOKEN>\",    13  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar2.png?token=<TOKEN>\"    14  }    15  ],    16  \"error\": null    17  }            `\n\n* * *\n\n## Create signed upload URL\n\nCreates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: `insert`\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The file path, including the current file name. For example `folder/image.png`.\n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nCreate Signed Upload URL\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .createSignedUploadUrl('folder/cat.jpg')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/upload/sign/avatars/folder/cat.jpg?token=<TOKEN>\",    4  \"path\": \"folder/cat.jpg\",    5  \"token\": \"<TOKEN>\"    6  },    7  \"error\": null    8  }            `\n\n* * *\n\n## Upload to a signed URL\n\nUpload a file with a token generated from `createSignedUploadUrl`.\n\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n    \n*   tokenRequiredstring\n    \n    The token generated from `createSignedUploadUrl`\n    \n*   fileBodyRequiredFileBody\n    \n    The body of the file to be stored in the bucket.\n    \n*   fileOptionsOptionalFileOptions\n    \n    Details\n    \n    *   cacheControlOptionalstring\n        \n        The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n        \n    *   contentTypeOptionalstring\n        \n        the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n        \n    *   duplexOptionalstring\n        \n        The duplex option is a string parameter that enables or disables duplex streaming, allowing for both reading and writing data in the same stream. It can be passed as an option to the fetch() method.\n        \n    *   upsertOptionalboolean\n        \n        When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false.\n        \n    \n\n### Return Type\n\nPromise<Union: expand to see options>\n\nDetails\n\n*   union option 1object\n    \n    Details\n    \n*   union option 2object\n    \n    Details\n    \n\nUpload to a signed URL\n\n`   1  const { data, error } = await supabase    2  .storage    3  .from('avatars')    4  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"path\": \"folder/cat.jpg\",    4  \"fullPath\": \"avatars/folder/cat.jpg\"    5  },    6  \"error\": null    7  }            `\n\n* * *\n\n## Retrieve public URL\n\nA simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n\n*   The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n*   RLS policy permissions required:\n    *   `buckets` table permissions: none\n    *   `objects` table permissions: none\n*   Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n\n### Parameters\n\n*   pathRequiredstring\n    \n    The path and name of the file to generate the public URL for. For example `folder/image.png`.\n    \n*   optionsOptionalobject\n    \n    Details\n    \n    *   downloadOptionalUnion: expand to see options\n        \n        Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n        \n        Details\n        \n    *   transformOptionalTransformOptions\n        \n        Transform the asset before serving it to the client.\n        \n        Details\n        \n    \n\n### Return Type\n\nobject\n\nDetails\n\n*   dataRequiredobject\n    \n    Details\n    \n\nReturns the URL for an asset in a public bucketReturns the URL for an asset in a public bucket with transformationsReturns the URL which triggers the download of an asset in a public bucket\n\n`   1  const { data } = supabase    2  .storage    3  .from('public-bucket')    4  .getPublicUrl('folder/avatar1.png')            `\n\nResponse\n\n`   1  {    2  \"data\": {    3  \"publicUrl\": \"https://example.supabase.co/storage/v1/object/public/public-bucket/folder/avatar1.png\"    4  }    5  }            `\n\n* * *\n\n## Release Notes\n\nSupabase.js v2 release notes.\n\nInstall the latest version of @supabase/supabase-js\n\nTerminal\n\n`   1  npm install @supabase/supabase-js            `\n\n### Explicit constructor options[#](#explicit-constructor-options)\n\nAll client specific options within the constructor are keyed to the library.\n\nSee [PR](https://github.com/supabase/supabase-js/pull/458):\n\n`   1  const supabase = createClient(apiURL, apiKey, {    2  db: {    3  schema: 'public',    4  },    5  auth: {    6  storage: AsyncStorage,    7  autoRefreshToken: true,    8  persistSession: true,    9  detectSessionInUrl: true,    10  },    11  realtime: {    12  channels,    13  endpoint,    14  },    15  global: {    16  fetch: customFetch,    17  headers: DEFAULT_HEADERS,    18  },    19  })            `\n\n### TypeScript support[#](#typescript-support)\n\nThe libraries now support typescript.\n\nv1.0\n\n``   1  // previously definitions were injected in the `from()` method    2  supabase.from<Definitions['Message']>('messages').select('\\*')            ``\n\n* * *\n\nv2.0\n\n``   1  import type { Database } from './DatabaseDefinitions'    2      3  // definitions are injected in `createClient()`    4  const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)    5      6  const { data } = await supabase.from('messages').select().match({ id: 1 })            ``\n\nTypes can be generated via the CLI:\n\nTerminal\n\n`   1  supabase start    2  supabase gen types typescript --local > DatabaseDefinitions.ts            `\n\n### Data operations return minimal[#](#data-operations-return-minimal)\n\n`.insert()` / `.upsert()` / `.update()` / `.delete()` don't return rows by default: [PR](https://github.com/supabase/postgrest-js/pull/276).\n\nPreviously, these methods return inserted/updated/deleted rows by default (which caused [some confusion](https://github.com/supabase/supabase/discussions/1548)), and you can opt to not return it by specifying `returning: 'minimal'`. Now the default behavior is to not return rows. To return inserted/updated/deleted rows, add a `.select()` call at the end, e.g.:\n\n`   1  const { data, error } = await supabase    2  .from('my_table')    3  .delete()    4  .eq('id', 1)    5  .select()            `\n\n### New ordering defaults[#](#new-ordering-defaults)\n\n`.order()` now defaults to Postgres’s default: [PR](https://github.com/supabase/postgrest-js/pull/283).\n\nPreviously `nullsFirst` defaults to `false` , meaning `null`s are ordered last. This is bad for performance if e.g. the column uses an index with `NULLS FIRST` (which is the default direction for indexes).\n\n### Cookies and localstorage namespace[#](#cookies-and-localstorage-namespace)\n\nStorage key name in the Auth library has changed to include project reference which means that existing websites that had their JWT expiry set to a longer time could find their users logged out with this upgrade.\n\n``   1  const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`            ``\n\n### New Auth Types[#](#new-auth-types)\n\nTypescript typings have been reworked. `Session` interface now guarantees that it will always have an `access_token`, `refresh_token` and `user`\n\n./types.ts\n\n`   1  interface Session {    2  provider_token?: string | null    3  access_token: string    4  expires_in?: number    5  expires_at?: number    6  refresh_token: string    7  token_type: string    8  user: User    9  }            `\n\n### New Auth methods[#](#new-auth-methods)\n\nWe're removing the `signIn()` method in favor of more explicit function signatures: `signInWithPassword()`, `signInWithOtp()`, and `signInWithOAuth()`.\n\nv1.0\n\n`   1  const { data } = await supabase.auth.signIn({    2  email: 'hello@example',    3  password: 'pass',    4  })            `\n\n* * *\n\nv2.0\n\n`   1  const { data } = await supabase.auth.signInWithPassword({    2  email: 'hello@example',    3  password: 'pass',    4  })            `\n\n### New Realtime methods[#](#new-realtime-methods)\n\nThere is a new `channel()` method in the Realtime library, which will be used for our Multiplayer updates.\n\nWe will deprecate the `.from().on().subscribe()` method previously used for listening to postgres changes.\n\n`   1  supabase    2  .channel('any_string_you_want')    3  .on('presence', { event: 'track' }, (payload) => {    4  console.log(payload)    5  })    6  .subscribe()    7      8  supabase    9  .channel('any_string_you_want')    10  .on(    11  'postgres_changes',    12  {    13  event: 'INSERT',    14  schema: 'public',    15  table: 'movies',    16  },    17  (payload) => {    18  console.log(payload)    19  }    20  )    21  .subscribe()            `\n\n### Deprecated setAuth()[#](#deprecated-setauth)\n\nDeprecated and removed `setAuth()` . To set a custom `access_token` jwt instead, pass the custom header into the `createClient()` method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340))\n\n### All changes[#](#all-changes)\n\n*   `supabase-js`\n    *   `shouldThrowOnError` has been removed until all the client libraries support this option ([PR](https://github.com/supabase/supabase-js/pull/490)).\n*   `postgrest-js`\n    *   TypeScript typings have been reworked [PR](https://github.com/supabase/postgrest-js/pull/279)\n    *   Use `undefined` instead of `null` for function params, types, etc. ([https://github.com/supabase/postgrest-js/pull/278](https://github.com/supabase/postgrest-js/pull/278))\n    *   Some features are now obsolete: ([https://github.com/supabase/postgrest-js/pull/275](https://github.com/supabase/postgrest-js/pull/275))\n        *   filter shorthands (e.g. `cs` vs. `contains`)\n        *   `body` in response (vs. `data`)\n        *   `upsert`ing through the `.insert()` method\n        *   `auth` method on `PostgrestClient`\n        *   client-level `throwOnError`\n*   `gotrue-js`\n    *   `supabase-js` client allows passing a `storageKey` param which will allow the user to set the key used in local storage for storing the session. By default, this will be namespace-d with the supabase project ref. ([PR](https://github.com/supabase/supabase-js/pull/460))\n    *   `signIn` method is now split into `signInWithPassword` , `signInWithOtp` , `signInWithOAuth` ([PR](https://github.com/supabase/gotrue-js/pull/304))\n    *   Deprecated and removed `session()` , `user()` in favour of using `getSession()` instead. `getSession()` will always return a valid session if a user is already logged in, meaning no more random logouts. ([PR](https://github.com/supabase/gotrue-js/pull/299))\n    *   Deprecated and removed setting for `multitab` support because `getSession()` and gotrue’s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366))\n    *   No more throwing of random errors, gotrue-js v2 always returns a custom error type: ([PR](https://github.com/supabase/gotrue-js/pull/341))\n        *   `AuthSessionMissingError`\n            *   Indicates that a session is expected but missing\n        *   `AuthNoCookieError`\n            *   Indicates that a cookie is expected but missing\n        *   `AuthInvalidCredentialsError`\n            *   Indicates that the incorrect credentials were passed\n    *   Renamed the `api` namespace to `admin` , the `admin` namespace will only contain methods that should only be used in a trusted server-side environment with the service role key\n    *   Moved `resetPasswordForEmail` , `getUser` and `updateUser` to the `GoTrueClient` which means they will be accessible from the `supabase.auth` namespace in `supabase-js` instead of having to do `supabase.auth.api` to access them\n    *   Removed `sendMobileOTP` , `sendMagicLinkEmail` in favor of `signInWithOtp`\n    *   Removed `signInWithEmail`, `signInWithPhone` in favor of `signInWithPassword`\n    *   Removed `signUpWithEmail` , `signUpWithPhone` in favor of `signUp`\n    *   Replaced `update` with `updateUser`\n*   `storage-js`\n    *   Return types are more strict. Functions types used to indicate that the data returned could be null even if there was no error. We now make use of union types which only mark the data as null if there is an error and vice versa. ([PR](https://github.com/supabase/storage-js/pull/60))\n    *   The `upload` and `update` function returns the path of the object uploaded as the `path` parameter. Previously the returned value had the bucket name prepended to the path which made it harder to pass the value on to other storage-js methods since all methods take the bucket name and path separately. We also chose to call the returned value `path` instead of `Key` ([PR](https://github.com/supabase/storage-js/pull/75))\n    *   `getPublicURL` only returns the public URL inside the data object. This keeps it consistent with our other methods of returning only within the data object. No error is returned since this method cannot does not throw an error ([PR](https://github.com/supabase/storage-js/pull/93))\n    *   signed urls are returned as `signedUrl` instead of `signedURL` in both `createSignedUrl` and `createSignedUrls` ([PR](https://github.com/supabase/storage-js/pull/94))\n    *   Encodes URLs returned by `createSignedUrl`, `createSignedUrls` and `getPublicUrl` ([PR](https://github.com/supabase/storage-js/pull/86))\n    *   `createsignedUrl` used to return a url directly and and within the data object. This was inconsistent. Now we always return values only inside the data object across all methods. ([PR](https://github.com/supabase/storage-js/pull/88))\n    *   `createBucket` returns a data object instead of the name of the bucket directly. ([PR](https://github.com/supabase/storage-js/pull/89))\n    *   Fixed types for metadata ([PR](https://github.com/supabase/storage-js/pull/90))\n    *   Better error types make it easier to track down what went wrong quicker.\n    *   `SupabaseStorageClient` is no longer exported. Use `StorageClient` instead. ([PR](https://github.com/supabase/storage-js/pull/92)).\n*   `realtime-js`\n    *   `RealtimeSubscription` class no longer exists and replaced by `RealtimeChannel`.\n    *   `RealtimeClient`'s `disconnect` method now returns type of `void` . It used to return type of `Promise<{ error: Error | null; data: boolean }`.\n    *   Removed `removeAllSubscriptions` and `removeSubscription` methods from `SupabaseClient` class.\n    *   Removed `SupabaseRealtimeClient` class.\n    *   Removed `SupabaseQueryBuilder` class.\n    *   Removed `SupabaseEventTypes` type.\n        *   Thinking about renaming this to something like `RealtimePostgresChangeEvents` and moving it to `realtime-js` v2.\n    *   Removed `.from(’table’).on(’INSERT’, () ⇒ {}).subscribe()` in favor of new Realtime client API.\n*   `functions-js`\n    *   supabase-js v1 only threw an error if the fetch call itself threw an error (network errors, etc) and not if the function returned HTTP errors like 400s or 500s. We have changed this behaviour to return an error if your function throws an error.\n    *   We have introduced new error types to distinguish between different kinds of errors. A `FunctionsHttpError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\n    *   The correct content-type headers are automatically attached when sending the request if you don’t pass in a `Content-Type` header and pass in an argument to your function. We automatically attach the content type for `Blob`, `ArrayBuffer`, `File`, `FormData` ,`String` . If it doesn’t match any of these we assume the payload is `json` , we serialise the payload as JSON and attach the content type as `application/json`.\n    *   `responseType` does not need to be explicitly passed in. We parse the response based on the `Content-Type` response header sent by the function. We support parsing the responses as `text`, `json`, `blob`, `form-data` and are parsed as `text` by default.\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•Privacy settings\n    \n    Accept Opt out Privacy settings"
},
{
  "url": "https://supabase.com/docs/reference/python/introduction",
  "markdown": "# Python API Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/csharp/introduction",
  "markdown": "# C# API Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/swift/introduction",
  "markdown": "# Swift API Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/kotlin/introduction",
  "markdown": "# Kotlin API Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/resources",
  "markdown": "# Resources | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/auth0",
  "markdown": "# Migrate from Auth0 to Supabase Auth\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/firebase-auth",
  "markdown": "# Migrate from Firebase Auth to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/firestore-data",
  "markdown": "# Migrated from Firebase Firestore to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/firebase-storage",
  "markdown": "# Migrated from Firebase Storage to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/heroku",
  "markdown": "# Migrate from Heroku to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/render",
  "markdown": "# Migrate from Render to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/amazon-rds",
  "markdown": "# Migrate from Amazon RDS to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/postgres",
  "markdown": "# Migrate from Postgres to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/neon",
  "markdown": "# Migrate from Neon to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/vercel-postgres",
  "markdown": "# Migrate from Vercel Postgres to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/mysql",
  "markdown": "# Migrate from MySQL to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform/migrating-to-supabase/mssql",
  "markdown": "# Migrate from MSSQL to Supabase\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/api/introduction",
  "markdown": "# Management API Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/platform",
  "markdown": "# Supabase Platform | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/cli/introduction",
  "markdown": "# CLI Reference | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/integrations",
  "markdown": "# Integrations | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/self-hosting",
  "markdown": "# Self-Hosting | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/self-hosting-auth/introduction",
  "markdown": "# Self-Hosting | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/self-hosting-realtime/introduction",
  "markdown": "# Self-Hosting | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/self-hosting-storage/introduction",
  "markdown": "# Self-Hosting | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts/database-create-migration",
  "markdown": "# AI Prompt: Database: Create migration\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/reference/self-hosting-analytics/introduction",
  "markdown": "# Self-Hosting | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts/code-format-sql",
  "markdown": "# AI Prompt: Postgres SQL Style Guide\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/import-data",
  "markdown": "# Import data into Supabase | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/features",
  "markdown": "# Features | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/architecture",
  "markdown": "# Architecture | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/ios-swiftui",
  "markdown": "# Use Supabase with iOS and SwiftUI\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/laravel",
  "markdown": "# Use Supabase with Laravel | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/quickstarts/ruby-on-rails",
  "markdown": "# Use Supabase with Ruby on Rails\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-nextjs",
  "markdown": "# Build a User Management App with Next.js\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-react",
  "markdown": "# Build a User Management App with React\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3",
  "markdown": "# Build a User Management App with Nuxt 3\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-vue-3",
  "markdown": "# Build a User Management App with Vue 3\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-angular",
  "markdown": "# Build a User Management App with Angular\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-redwoodjs",
  "markdown": "# Build a User Management App with RedwoodJS\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-solidjs",
  "markdown": "# Build a User Management App with SolidJS\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-svelte",
  "markdown": "# Build a User Management App with Svelte\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-sveltekit",
  "markdown": "# Build a User Management App with SvelteKit\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-refine",
  "markdown": "# Build a User Management App with refine\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-flutter",
  "markdown": "# Build a User Management App with Flutter\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-expo-react-native",
  "markdown": "# Build a User Management App with Expo React Native\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-kotlin",
  "markdown": "# Build a Product Management Android App with Jetpack Compose\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-ionic-react",
  "markdown": "# Build a User Management App with Ionic React\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-ionic-vue",
  "markdown": "# Build a User Management App with Ionic Vue\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-swift",
  "markdown": "# Build a User Management App with Swift and SwiftUI\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/tutorials/with-ionic-angular",
  "markdown": "# Build a User Management App with Ionic Angular\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts/nextjs-supabase-auth",
  "markdown": "# AI Prompt: Bootstrap Next.js app with Supabase Auth\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts/database-rls-policies",
  "markdown": "# AI Prompt: Database: Create RLS policies\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/getting-started/ai-prompts/database-functions",
  "markdown": "# AI Prompt: Database: Create functions\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/cli/getting-started",
  "markdown": "# Supabase CLI | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/auth/auth-helpers/nextjs",
  "markdown": "# Supabase Auth with the Next.js App Router\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/replication",
  "markdown": "# Replication | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/query-optimization",
  "markdown": "# Query Optimization | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/database-advisors",
  "markdown": "# Performance and Security Advisors | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/testing",
  "markdown": "# Testing Your Database | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/custom-postgres-config",
  "markdown": "# Customizing Postgres configs | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/connecting-to-postgres",
  "markdown": "# Connect to your database | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/timeouts",
  "markdown": "# Timeouts | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/inspect",
  "markdown": "# Debugging and monitoring | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/secure-data",
  "markdown": "# Securing your data | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/debugging-performance",
  "markdown": "# Debugging performance issues | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/tables",
  "markdown": "# Tables and Data | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/supavisor",
  "markdown": "# Supavisor | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/arrays",
  "markdown": "# Working With Arrays | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/indexes",
  "markdown": "# Managing Indexes in PostgreSQL | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_cron",
  "markdown": "# pg\\_cron: Schedule Recurring Jobs with Cron Syntax in Postgres\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/prisma",
  "markdown": "# Prisma | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/drizzle",
  "markdown": "# Drizzle | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/joins-and-nesting",
  "markdown": "# Querying Joins and Nested tables\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_graphql",
  "markdown": "# pg\\_graphql: GraphQL for PostgreSQL | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/firebase",
  "markdown": "# Firebase | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_hashids",
  "markdown": "# pg\\_hashids: Short UIDs | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres-js",
  "markdown": "# Postgres.js | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/json",
  "markdown": "# Managing JSON and unstructured data\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/logflare",
  "markdown": "# Logflare | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/pgadmin",
  "markdown": "# Connecting with pgAdmin | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/mssql",
  "markdown": "# MSSQL | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_jsonschema",
  "markdown": "# pg\\_jsonschema: JSON Schema Validation | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/cascade-deletes",
  "markdown": "# Cascade Deletes | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/enums",
  "markdown": "# Managing Enums in Postgres | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/psql",
  "markdown": "# Connecting with PSQL | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_net",
  "markdown": "# pg\\_net: Async Networking | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/redis",
  "markdown": "# Redis | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/paddle",
  "markdown": "# Paddle | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_plan_filter",
  "markdown": "# pg\\_plan\\_filter: Restrict Total Cost | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/functions",
  "markdown": "# Database Functions | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/dbeaver",
  "markdown": "# Connecting with DBeaver | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/triggers",
  "markdown": "# Postgres Triggers | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_stat_monitor",
  "markdown": "# pg\\_stat\\_monitor: Query Performance Monitoring | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/metabase",
  "markdown": "# Connecting to Metabase | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/snowflake",
  "markdown": "# Snowflake | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions",
  "markdown": "# Postgres Extensions Overview | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/postgres_fdw",
  "markdown": "# postgres\\_fdw | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/webhooks",
  "markdown": "# Database Webhooks | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/wrappers/stripe",
  "markdown": "# Stripe | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/full-text-search",
  "markdown": "# Full Text Search | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgvector",
  "markdown": "# pgvector: Embeddings and vector similarity\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/hypopg",
  "markdown": "# HypoPG: Hypothetical indexes | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/dropping-all-tables-in-schema",
  "markdown": "# Drop all tables in a PostgreSQL schema\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pg_stat_statements",
  "markdown": "# pg\\_stat\\_statements: Query Performance Monitoring | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/plv8",
  "markdown": "# plv8: JavaScript Language | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/partitions",
  "markdown": "# Partitioning tables | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/first-row-in-group",
  "markdown": "# Select first row for each group in PostgreSQL\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/which-version-of-postgres",
  "markdown": "# Print PostgreSQL version | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/postgis",
  "markdown": "# PostGIS: Geo queries | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/http",
  "markdown": "# http: RESTful Client | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/connection-management",
  "markdown": "# Connection management | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/setup-replication-external",
  "markdown": "# Replicate to another Postgres database using Logical Replication\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/index_advisor",
  "markdown": "# index\\_advisor: query optimization | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/orioledb",
  "markdown": "# OrioleDB Overview | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/managing-passwords",
  "markdown": "# Postgres Roles | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/row-level-security",
  "markdown": "# Row Level Security | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgsodium",
  "markdown": "# pgsodium (pending deprecation): Encryption Features\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgjwt",
  "markdown": "# pgjwt: JSON Web Tokens | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgaudit",
  "markdown": "# PGAudit: Postgres Auditing | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/managing-timezones",
  "markdown": "# Database configuration | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/column-level-security",
  "markdown": "# Column Level Security | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgtap",
  "markdown": "# pgTAP: Unit Testing | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/plpgsql_check",
  "markdown": "# plpgsql\\_check: PL/pgSQL Linter | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/hardening-data-api",
  "markdown": "# Hardening the Data API | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgroonga",
  "markdown": "# PGroonga: Multilingual Full Text Search\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/timescaledb",
  "markdown": "# timescaledb: Time-Series data | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/postgres/custom-claims-and-role-based-access-control-rbac",
  "markdown": "# Custom Claims & Role-based Access Control (RBAC)\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
},
{
  "url": "https://supabase.com/docs/guides/database/extensions/pgrouting",
  "markdown": "# pgrouting: Geospatial Routing | Supabase Docs\n\n1.  We use first-party cookies to improve our services. [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)\n    \n    [Learn more](https://supabase.com/privacy#8-cookies-and-similar-technologies-used-on-our-european-services)•"
}]